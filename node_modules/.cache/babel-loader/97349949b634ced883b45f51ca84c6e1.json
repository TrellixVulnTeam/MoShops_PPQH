{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport firebase from 'firebase/app';\nimport firebaseApp from '../Firebase'; // defining types...\n\n// the firebase reference to storage\nconst storageRef = firebaseApp.fbApp.storage().ref();\n\nfunction FirebaseFileUploadApi() {\n  _s();\n\n  // the data from the file upload response\n  const [dataResponse, setDataResponse] = useState(); // sets properties on the file to be uploaded\n\n  const [fileData, setFileData] = useState();\n  const [fileName, setFileName] = useState();\n  const [upload, setUpload] = useState(false); // if we are loading a file or not\n\n  const [isLoading, setIsLoading] = useState(false); // if an error happened during the process\n\n  const [isError, setIsError] = useState(false); // used for tracking the % of upload completed\n\n  const [progress, setProgress] = useState(null);\n\n  const clearError = () => {\n    setIsError(null);\n  };\n\n  const uploadImage = () => {\n    setUpload(true);\n  }; // this function will be called when the any properties in the dependency array changes\n\n\n  useEffect(() => {\n    /**\n     *\n     * @param _value\n     */\n    const setUp = _value => {\n      if (_value) {\n        console.log('[useFirebaseUpload]: input is a file, creating reference put'); //@ts-ignore\n        //let fName = `${_value.name}`;\n        // setting the firebase properties for the file upload\n\n        let ref = storageRef.child(\"pictures/\" + fileName); //@ts-ignore\n\n        return ref.put(_value);\n      } else {\n        let v = _value; //let fName = `${new Date().getTime()}.${v.format}`;\n        // setting the firebase properties for the file upload\n\n        let ref = storageRef.child(\"images/\" + fileName);\n        return ref.putString(v.dataUrl, \"data_url\");\n      }\n    };\n\n    const uploadData = async () => {\n      // initialize upload information\n      setIsError(false);\n      setIsLoading(true);\n      setProgress({\n        value: 0\n      }); // handle a file upload or a dataUrl upload\n\n      let uploadTask = setUp(fileData); // wrap the whole thing in a try catch block to update the error state\n\n      try {\n        // tracking the state of the upload to assist in updating the\n        // application UI\n        uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, _progress => {\n          var value = _progress.bytesTransferred / _progress.totalBytes;\n          console.log(\"[useFirebaseUpload]: Upload is \" + value * 100 + \"% done\");\n          setProgress({\n            value\n          });\n        }, _error => {\n          setIsLoading(false);\n          setIsError(_error);\n        }, async () => {\n          setIsError(false);\n          setIsLoading(false); // need to get the url to download the file\n\n          let downloadUrl = await uploadTask.snapshot.ref.getDownloadURL(); // set the data when upload has completed\n\n          setDataResponse({\n            metaData: uploadTask.snapshot.metadata,\n            downloadUrl\n          }); // reset progress\n\n          setProgress(null);\n        });\n      } catch (_error) {\n        setIsLoading(false);\n        setIsError(_error);\n      }\n    }; //makes sure fileData isn't null before uploading it\n\n\n    fileData && upload && uploadData();\n    setUpload(false);\n  }, [upload, fileData, fileName]);\n  return [{\n    dataResponse,\n    isLoading,\n    isError,\n    progress\n  }, setFileData, clearError, uploadImage, setFileName];\n}\n\n_s(FirebaseFileUploadApi, \"R5zAOb2mOqLYE6wi4dfMWD679ZU=\");\n\n_c = FirebaseFileUploadApi;\nexport default FirebaseFileUploadApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseFileUploadApi\");","map":{"version":3,"sources":["/Users/drew/Documents/Development/Morgan_Site/MoShops/src/hooks/useFirebaseUpload.tsx"],"names":["useState","useEffect","firebase","firebaseApp","storageRef","fbApp","storage","ref","FirebaseFileUploadApi","dataResponse","setDataResponse","fileData","setFileData","fileName","setFileName","upload","setUpload","isLoading","setIsLoading","isError","setIsError","progress","setProgress","clearError","uploadImage","setUp","_value","console","log","child","put","v","putString","dataUrl","uploadData","value","uploadTask","on","TaskEvent","STATE_CHANGED","_progress","bytesTransferred","totalBytes","_error","downloadUrl","snapshot","getDownloadURL","metaData","metadata"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport firebase from 'firebase/app';\nimport firebaseApp from '../Firebase';\n\n// defining types...\ntype UploadDataResponse =\n  | { metaData: firebase.storage.FullMetadata; downloadUrl: any }\n  | undefined;\ntype ProgressResponse = { value: number } | undefined | null;\ntype DataAsDataUrl = { dataUrl: string; format: string };\ntype UploadSource = File | DataAsDataUrl | undefined;\n\n// the firebase reference to storage\nconst storageRef = firebaseApp.fbApp.storage().ref();\n\nfunction FirebaseFileUploadApi(): [\n  {\n    dataResponse: UploadDataResponse;\n    isLoading: boolean;\n    isError: any;\n    progress: ProgressResponse;\n  },\n  Function,\n  Function,\n  Function,\n  Function\n] {\n  // the data from the file upload response\n  const [dataResponse, setDataResponse] = useState<UploadDataResponse>();\n\n  // sets properties on the file to be uploaded\n  const [fileData, setFileData] = useState<UploadSource>();\n\n  const [fileName, setFileName] = useState<string>();\n\n  const [upload, setUpload] = useState<boolean>(false);\n\n  // if we are loading a file or not\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  // if an error happened during the process\n  const [isError, setIsError] = useState<any>(false);\n\n  // used for tracking the % of upload completed\n  const [progress, setProgress] = useState<ProgressResponse>(null);\n\n  const clearError = () => {\n    setIsError(null);\n  };\n  const uploadImage = () => {\n    setUpload(true)\n  }\n  // this function will be called when the any properties in the dependency array changes\n  useEffect(() => {\n    /**\n     *\n     * @param _value\n     */\n    const setUp = (_value: UploadSource): firebase.storage.UploadTask => {\n\n      if (_value as File) {\n        console.log('[useFirebaseUpload]: input is a file, creating reference put')\n        //@ts-ignore\n        //let fName = `${_value.name}`;\n        // setting the firebase properties for the file upload\n        let ref = storageRef.child(\"pictures/\" + fileName);\n        //@ts-ignore\n        return ref.put(_value);\n      } else {\n        let v = _value as DataAsDataUrl;\n        //let fName = `${new Date().getTime()}.${v.format}`;\n        // setting the firebase properties for the file upload\n        let ref = storageRef.child(\"images/\" + fileName);\n        return ref.putString(v.dataUrl, \"data_url\");\n      }\n    };\n\n    const uploadData = async () => {\n      // initialize upload information\n      setIsError(false);\n      setIsLoading(true);\n\n      setProgress({ value: 0 });\n\n      // handle a file upload or a dataUrl upload\n      let uploadTask = setUp(fileData);\n\n      // wrap the whole thing in a try catch block to update the error state\n      try {\n        // tracking the state of the upload to assist in updating the\n        // application UI\n        uploadTask.on(\n          firebase.storage.TaskEvent.STATE_CHANGED,\n          _progress => {\n            var value = _progress.bytesTransferred / _progress.totalBytes;\n            console.log(\"[useFirebaseUpload]: Upload is \" + value * 100 + \"% done\");\n            setProgress({ value });\n          },\n          _error => {\n            setIsLoading(false);\n            setIsError(_error);\n          },\n          async () => {\n            setIsError(false);\n            setIsLoading(false);\n\n            // need to get the url to download the file\n            let downloadUrl = await uploadTask.snapshot.ref.getDownloadURL();\n\n            // set the data when upload has completed\n            setDataResponse({\n              metaData: uploadTask.snapshot.metadata,\n              downloadUrl\n            });\n\n            // reset progress\n            setProgress(null);\n          }\n        );\n      } catch (_error) {\n        setIsLoading(false);\n        setIsError(_error);\n      }\n    };\n    //makes sure fileData isn't null before uploading it\n    fileData && upload && uploadData();\n    setUpload(false);\n  }, [upload, fileData, fileName]);\n\n  return [\n    { dataResponse, isLoading, isError, progress },\n    setFileData,\n    clearError,\n    uploadImage,\n    setFileName\n  ];\n}\n\nexport default FirebaseFileUploadApi;"]},"metadata":{},"sourceType":"module"}