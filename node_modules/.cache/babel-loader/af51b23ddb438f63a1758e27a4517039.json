{"ast":null,"code":"var _jsxFileName = \"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/PortfolioContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect, useState } from 'react';\nimport firebase from '../Firebase';\nimport { IonItem, IonImg, IonCol, IonRow, IonGrid } from '@ionic/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'spread':\n      return { ...action.payload\n      };\n\n    case 'dbReplace':\n      return { ...action.payload\n      };\n\n    default:\n      return { ...state,\n        [action.type]: action.payload\n      };\n  }\n};\n\nconst PortfolioContainer = ({\n  pageName\n}) => {\n  _s();\n\n  const [allStorageImgs, updateAllStorageImgs] = useReducer(reducer, {});\n  const [allPortfolioEntries, updateAllPortfolioEntries] = useReducer(reducer, {});\n  const [allDbImages, updateDbImages] = useReducer(reducer, {});\n  const [localImgs, updateLocalImgs] = useReducer(reducer, {});\n  const [err, updateErr] = useState();\n  const [portfolioItems, updatePortfolioItems] = useReducer(reducer, {});\n  const storageRef = firebase.fbApp.storage().ref();\n  const database = firebase.fbApp.database();\n  var listRef = storageRef.child('pictures');\n  useEffect(() => {\n    console.log(`[useEffect] entering use effect`);\n    listRef.listAll().then(function (res) {\n      res.items.forEach(function (itemRef) {\n        itemRef.getDownloadURL().then(function (url) {\n          updateAllStorageImgs({\n            type: itemRef.name,\n            //@ts-ignore\n            payload: {\n              imageUrl: url,\n              imageName: itemRef.name,\n              imageFullPath: itemRef.fullPath\n            }\n          });\n        });\n      });\n    }).catch(function (error) {\n      console.log('error getting pictures references');\n      updateErr('error getting pictures references');\n    });\n    database.ref('images/').once('value').then(function (snapshot) {\n      updateDbImages({\n        type: \"dbReplace\",\n        payload: snapshot.val()\n      });\n    });\n    database.ref('portfolio/').once('value').then(function (snapshot) {\n      //console.log('[imagesDb] snapshot val;')\n      //console.log(snapshot.val())\n      updateAllPortfolioEntries({\n        type: \"dbReplace\",\n        payload: snapshot.val()\n      });\n    }); //console.log('[PortfolioContainer]: all entries:', allPortfolioEntries)\n\n    console.log(`[useEffect] all portfolio entries`, allPortfolioEntries);\n  }, []); //Trying to create the portfolio matrix to transpose on teh responsive grid. Only need to update on completion of updateAllPortfolioEntreies\n\n  useEffect(() => {\n    const allPortfolioItems = Object.entries(allPortfolioEntries).map((key, value) => {\n      //@ts-ignore\n      let {\n        itemName,\n        creationDate,\n        itemDescription,\n        imgArr\n      } = key[1];\n\n      if (allStorageImgs[allDbImages[imgArr[0]].imageName]) {\n        const imgUrl = allStorageImgs[allDbImages[imgArr[0]].imageName].imageUrl;\n        const width = allStorageImgs[allDbImages[imgArr[0]].imageName].imageWidth;\n        const height = allStorageImgs[allDbImages[imgArr[0]].imageName].imageHeight;\n        const date = allDbImages[imgArr[0]].creationDate;\n        const newItem = {\n          imgUrl: imgUrl,\n          width: width,\n          height: height,\n          date: date\n        };\n        return newItem;\n      }\n    });\n    console.log(`[useEffect2] all portfolio items`, allPortfolioItems);\n    updatePortfolioItems({\n      type: 'myArr',\n      payload: allPortfolioItems\n    });\n    buildPortfolioMatrix();\n  }, [allPortfolioEntries]);\n  let colWidth = 0;\n  const maxWidth = 1000;\n\n  const buildPortfolioMatrix = () => {\n    //start with row\n    //add image column\n    //add dimensions to colWidth\n    //if max width break\n    //end with row\n    let sortedArr = portfolioItems.myArr || [];\n\n    for (const item of sortedArr) {\n      console.log(`[buildMatrix]: item width ${item.width}`);\n    }\n  };\n\n  const gridItems = () => {\n    //@ts-ignore\n    let returnArr = [/*#__PURE__*/_jsxDEV(IonItem, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 36\n    }, this)]; //console.log(portfolioItems)\n\n    if (portfolioItems.myArr) {\n      for (const item of portfolioItems.myArr) {\n        if (item && item.imgUrl != undefined) {\n          //console.log('entering thing')\n          if (colWidth == 0) {\n            //console.log(`[gridItems] creating item`)\n            returnArr.push( /*#__PURE__*/_jsxDEV(IonRow, {\n              children: /*#__PURE__*/_jsxDEV(IonCol, {\n                size: \"3\",\n                children: /*#__PURE__*/_jsxDEV(IonItem, {\n                  children: /*#__PURE__*/_jsxDEV(IonImg, {\n                    src: item.imgUrl\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 28\n            }, this));\n          }\n        }\n      }\n\n      return returnArr;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(IonGrid, {\n    children: [gridItems(), /*#__PURE__*/_jsxDEV(IonRow, {\n      children: /*#__PURE__*/_jsxDEV(IonItem, {\n        children: [\"Error Code: \", err ? err : 'none']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PortfolioContainer, \"Y8uygl/5862yHPqTKmY+kFYfrHc=\");\n\n_c = PortfolioContainer;\nexport default PortfolioContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PortfolioContainer\");","map":{"version":3,"sources":["/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/PortfolioContainer.tsx"],"names":["React","useReducer","useEffect","useState","firebase","IonItem","IonImg","IonCol","IonRow","IonGrid","reducer","state","action","type","payload","PortfolioContainer","pageName","allStorageImgs","updateAllStorageImgs","allPortfolioEntries","updateAllPortfolioEntries","allDbImages","updateDbImages","localImgs","updateLocalImgs","err","updateErr","portfolioItems","updatePortfolioItems","storageRef","fbApp","storage","ref","database","listRef","child","console","log","listAll","then","res","items","forEach","itemRef","getDownloadURL","url","name","imageUrl","imageName","imageFullPath","fullPath","catch","error","once","snapshot","val","allPortfolioItems","Object","entries","map","key","value","itemName","creationDate","itemDescription","imgArr","imgUrl","width","imageWidth","height","imageHeight","date","newItem","buildPortfolioMatrix","colWidth","maxWidth","sortedArr","myArr","item","gridItems","returnArr","undefined","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAmE,OAAnE;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,MAAlC,EAA0CC,OAA1C,QAAyD,cAAzD;;;AAcA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAaC,MAAb,KAA6B;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,aAAO,EACL,GAAGD,MAAM,CAACE;AADL,OAAP;;AAGF,SAAK,WAAL;AACE,aAAO,EACL,GAAGF,MAAM,CAACE;AADL,OAAP;;AAGF;AACE,aAAO,EACL,GAAGH,KADE;AAEL,SAACC,MAAM,CAACC,IAAR,GAAeD,MAAM,CAACE;AAFjB,OAAP;AAVJ;AAeD,CAhBD;;AAkBA,MAAMC,kBAA4C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrE,QAAM,CAACC,cAAD,EAAiBC,oBAAjB,IAAyCjB,UAAU,CAACS,OAAD,EAAU,EAAV,CAAzD;AACA,QAAM,CAACS,mBAAD,EAAsBC,yBAAtB,IAAmDnB,UAAU,CAACS,OAAD,EAAU,EAAV,CAAnE;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCrB,UAAU,CAACS,OAAD,EAAU,EAAV,CAAhD;AACA,QAAM,CAACa,SAAD,EAAYC,eAAZ,IAA+BvB,UAAU,CAACS,OAAD,EAAU,EAAV,CAA/C;AACA,QAAM,CAACe,GAAD,EAAMC,SAAN,IAAmBvB,QAAQ,EAAjC;AACA,QAAM,CAACwB,cAAD,EAAiBC,oBAAjB,IAAyC3B,UAAU,CAACS,OAAD,EAAU,EAAV,CAAzD;AACA,QAAMmB,UAAU,GAAGzB,QAAQ,CAAC0B,KAAT,CAAeC,OAAf,GAAyBC,GAAzB,EAAnB;AACA,QAAMC,QAAQ,GAAG7B,QAAQ,CAAC0B,KAAT,CAAeG,QAAf,EAAjB;AACA,MAAIC,OAAO,GAAGL,UAAU,CAACM,KAAX,CAAiB,UAAjB,CAAd;AACAjC,EAAAA,SAAS,CAAC,MAAM;AACdkC,IAAAA,OAAO,CAACC,GAAR,CAAa,iCAAb;AACAH,IAAAA,OAAO,CAACI,OAAR,GAAkBC,IAAlB,CAAuB,UAAUC,GAAV,EAAe;AACpCA,MAAAA,GAAG,CAACC,KAAJ,CAAUC,OAAV,CAAkB,UAAUC,OAAV,EAAmB;AACnCA,QAAAA,OAAO,CAACC,cAAR,GAAyBL,IAAzB,CAA8B,UAAUM,GAAV,EAAe;AAC3C3B,UAAAA,oBAAoB,CAAC;AACnBL,YAAAA,IAAI,EAAE8B,OAAO,CAACG,IADK;AAEnB;AACAhC,YAAAA,OAAO,EAAE;AACPiC,cAAAA,QAAQ,EAAEF,GADH;AAEPG,cAAAA,SAAS,EAAEL,OAAO,CAACG,IAFZ;AAGPG,cAAAA,aAAa,EAAEN,OAAO,CAACO;AAHhB;AAHU,WAAD,CAApB;AASD,SAVD;AAWD,OAZD;AAaD,KAdD,EAcGC,KAdH,CAcS,UAAUC,KAAV,EAAiB;AACxBhB,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACAX,MAAAA,SAAS,CAAC,mCAAD,CAAT;AACD,KAjBD;AAkBAO,IAAAA,QAAQ,CAACD,GAAT,CAAa,SAAb,EAAwBqB,IAAxB,CAA6B,OAA7B,EAAsCd,IAAtC,CAA2C,UAAUe,QAAV,EAAoB;AAC7DhC,MAAAA,cAAc,CAAC;AACbT,QAAAA,IAAI,EAAE,WADO;AAEbC,QAAAA,OAAO,EAAEwC,QAAQ,CAACC,GAAT;AAFI,OAAD,CAAd;AAID,KALD;AAMAtB,IAAAA,QAAQ,CAACD,GAAT,CAAa,YAAb,EAA2BqB,IAA3B,CAAgC,OAAhC,EAAyCd,IAAzC,CAA8C,UAAUe,QAAV,EAAoB;AAChE;AACA;AACAlC,MAAAA,yBAAyB,CAAC;AACxBP,QAAAA,IAAI,EAAE,WADkB;AAExBC,QAAAA,OAAO,EAAEwC,QAAQ,CAACC,GAAT;AAFe,OAAD,CAAzB;AAID,KAPD,EA1Bc,CAkCd;;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAa,mCAAb,EAAiDlB,mBAAjD;AAED,GArCQ,EAqCN,EArCM,CAAT,CAVqE,CAgDrE;;AACAjB,EAAAA,SAAS,CAAC,MAAK;AACb,UAAMsD,iBAAiB,GAAGC,MAAM,CAACC,OAAP,CAAevC,mBAAf,EAAoCwC,GAApC,CAAwC,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAChF;AACA,UAAI;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,YAAZ;AAA0BC,QAAAA,eAA1B;AAA2CC,QAAAA;AAA3C,UAAsDL,GAAG,CAAC,CAAD,CAA7D;;AAEA,UAAI3C,cAAc,CAACI,WAAW,CAAC4C,MAAM,CAAC,CAAD,CAAP,CAAX,CAAuBjB,SAAxB,CAAlB,EAAsD;AACpD,cAAMkB,MAAM,GAAGjD,cAAc,CAACI,WAAW,CAAC4C,MAAM,CAAC,CAAD,CAAP,CAAX,CAAuBjB,SAAxB,CAAd,CAAiDD,QAAhE;AACA,cAAMoB,KAAK,GAAGlD,cAAc,CAACI,WAAW,CAAC4C,MAAM,CAAC,CAAD,CAAP,CAAX,CAAuBjB,SAAxB,CAAd,CAAiDoB,UAA/D;AACA,cAAMC,MAAM,GAAGpD,cAAc,CAACI,WAAW,CAAC4C,MAAM,CAAC,CAAD,CAAP,CAAX,CAAuBjB,SAAxB,CAAd,CAAiDsB,WAAhE;AACA,cAAMC,IAAI,GAAGlD,WAAW,CAAC4C,MAAM,CAAC,CAAD,CAAP,CAAX,CAAuBF,YAApC;AACA,cAAMS,OAAsB,GAAG;AAC7BN,UAAAA,MAAM,EAAEA,MADqB;AAE7BC,UAAAA,KAAK,EAAEA,KAFsB;AAG7BE,UAAAA,MAAM,EAAEA,MAHqB;AAI7BE,UAAAA,IAAI,EAAEA;AAJuB,SAA/B;AAMA,eAAOC,OAAP;AACD;AACF,KAjByB,CAA1B;AAkBApC,IAAAA,OAAO,CAACC,GAAR,CAAa,kCAAb,EAAgDmB,iBAAhD;AACA5B,IAAAA,oBAAoB,CAAC;AACnBf,MAAAA,IAAI,EAAE,OADa;AAEnBC,MAAAA,OAAO,EAAE0C;AAFU,KAAD,CAApB;AAIAiB,IAAAA,oBAAoB;AACrB,GAzBQ,EAyBN,CAACtD,mBAAD,CAzBM,CAAT;AA0BA,MAAIuD,QAAQ,GAAG,CAAf;AACA,QAAMC,QAAQ,GAAG,IAAjB;;AACA,QAAMF,oBAAoB,GAAG,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA,QAAIG,SAAS,GAAGjD,cAAc,CAACkD,KAAf,IAAwB,EAAxC;;AACA,SAAK,MAAMC,IAAX,IAAmBF,SAAnB,EAA6B;AAC3BxC,MAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4ByC,IAAI,CAACX,KAAM,EAApD;AACD;AACF,GAVD;;AAYA,QAAMY,SAAS,GAAG,MAAM;AACtB;AACA,QAAIC,SAAuB,GAAG,cAAC,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAD,CAA9B,CAFsB,CAGtB;;AACA,QAAIrD,cAAc,CAACkD,KAAnB,EAA0B;AACxB,WAAK,MAAMC,IAAX,IAAmBnD,cAAc,CAACkD,KAAlC,EAAyC;AACvC,YAAIC,IAAI,IAAIA,IAAI,CAACZ,MAAL,IAAae,SAAzB,EAAoC;AAClC;AACA,cAAIP,QAAQ,IAAI,CAAhB,EAAmB;AACjB;AACAM,YAAAA,SAAS,CAACE,IAAV,eAAe,QAAC,MAAD;AAAA,qCACb,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAC,GAAb;AAAA,uCACE,QAAC,OAAD;AAAA,yCACE,QAAC,MAAD;AAAQ,oBAAA,GAAG,EAAEJ,IAAI,CAACZ;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADa;AAAA;AAAA;AAAA;AAAA,oBAAf;AAOD;AAEF;AACF;;AACD,aAAOc,SAAP;AACD;AACF,GAvBD;;AAyBA,sBACE,QAAC,OAAD;AAAA,eAEKD,SAAS,EAFd,eAIE,QAAC,MAAD;AAAA,6BAAQ,QAAC,OAAD;AAAA,mCAAsBtD,GAAG,GAACA,GAAD,GAAK,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAR;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA1HD;;GAAMV,kB;;KAAAA,kB;AA4HN,eAAeA,kBAAf","sourcesContent":["import React, { useReducer, useEffect, useState, ReactChild } from 'react';\nimport firebase from '../Firebase'\nimport { IonItem, IonImg, IonCol, IonRow, IonGrid } from '@ionic/react';\n\n\ninterface ContainerProps {\n  pageName: string;\n}\n\ninterface PortfolioItem {\n  imgUrl: string;\n  width: number;\n  height: number;\n  date: string;\n}\n\nconst reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case 'spread':\n      return {\n        ...action.payload\n      }\n    case 'dbReplace':\n      return {\n        ...action.payload\n      }\n    default:\n      return {\n        ...state,\n        [action.type]: action.payload\n      }\n  }\n}\n\nconst PortfolioContainer: React.FC<ContainerProps> = ({ pageName }) => {\n  const [allStorageImgs, updateAllStorageImgs] = useReducer(reducer, {})\n  const [allPortfolioEntries, updateAllPortfolioEntries] = useReducer(reducer, {})\n  const [allDbImages, updateDbImages] = useReducer(reducer, {})\n  const [localImgs, updateLocalImgs] = useReducer(reducer, {})\n  const [err, updateErr] = useState<string>();\n  const [portfolioItems, updatePortfolioItems] = useReducer(reducer, {})\n  const storageRef = firebase.fbApp.storage().ref();\n  const database = firebase.fbApp.database()\n  var listRef = storageRef.child('pictures');\n  useEffect(() => {\n    console.log(`[useEffect] entering use effect`)\n    listRef.listAll().then(function (res) {\n      res.items.forEach(function (itemRef) {\n        itemRef.getDownloadURL().then(function (url) {\n          updateAllStorageImgs({\n            type: itemRef.name,\n            //@ts-ignore\n            payload: {\n              imageUrl: url,\n              imageName: itemRef.name,\n              imageFullPath: itemRef.fullPath\n            }\n          });\n        })\n      });\n    }).catch(function (error) {\n      console.log('error getting pictures references')\n      updateErr('error getting pictures references')\n    });\n    database.ref('images/').once('value').then(function (snapshot) {\n      updateDbImages({\n        type: \"dbReplace\",\n        payload: snapshot.val()\n      });\n    })\n    database.ref('portfolio/').once('value').then(function (snapshot) {\n      //console.log('[imagesDb] snapshot val;')\n      //console.log(snapshot.val())\n      updateAllPortfolioEntries({\n        type: \"dbReplace\",\n        payload: snapshot.val()\n      });\n    });\n    //console.log('[PortfolioContainer]: all entries:', allPortfolioEntries)\n    console.log(`[useEffect] all portfolio entries`, allPortfolioEntries)\n    \n  }, []);\n  //Trying to create the portfolio matrix to transpose on teh responsive grid. Only need to update on completion of updateAllPortfolioEntreies\n  useEffect(()=> {\n    const allPortfolioItems = Object.entries(allPortfolioEntries).map((key, value) => {\n      //@ts-ignore\n      let { itemName, creationDate, itemDescription, imgArr } = key[1]\n\n      if (allStorageImgs[allDbImages[imgArr[0]].imageName]) {\n        const imgUrl = allStorageImgs[allDbImages[imgArr[0]].imageName].imageUrl;\n        const width = allStorageImgs[allDbImages[imgArr[0]].imageName].imageWidth;\n        const height = allStorageImgs[allDbImages[imgArr[0]].imageName].imageHeight;\n        const date = allDbImages[imgArr[0]].creationDate;\n        const newItem: PortfolioItem = {\n          imgUrl: imgUrl,\n          width: width,\n          height: height,\n          date: date\n        }\n        return newItem\n      }\n    })\n    console.log(`[useEffect2] all portfolio items`, allPortfolioItems)\n    updatePortfolioItems({\n      type: 'myArr',\n      payload: allPortfolioItems\n    })\n    buildPortfolioMatrix()\n  }, [allPortfolioEntries])\n  let colWidth = 0;\n  const maxWidth = 1000\n  const buildPortfolioMatrix = () => {\n    //start with row\n    //add image column\n    //add dimensions to colWidth\n    //if max width break\n    //end with row\n    let sortedArr = portfolioItems.myArr || []\n    for (const item of sortedArr){\n      console.log(`[buildMatrix]: item width ${item.width}`)\n    }\n  }\n  \n  const gridItems = () => {\n    //@ts-ignore\n    let returnArr: [ReactChild] = [<IonItem></IonItem>];\n    //console.log(portfolioItems)\n    if (portfolioItems.myArr) {\n      for (const item of portfolioItems.myArr) {\n        if (item && item.imgUrl!=undefined) {\n          //console.log('entering thing')\n          if (colWidth == 0) {\n            //console.log(`[gridItems] creating item`)\n            returnArr.push(<IonRow>\n              <IonCol size='3' >\n                <IonItem>\n                  <IonImg src={item.imgUrl} />\n                </IonItem>\n              </IonCol>\n            </IonRow>)\n          }\n          \n        }\n      }\n      return returnArr\n    }\n  }\n\n  return (\n    <IonGrid>\n  \n        {gridItems()}\n      \n      <IonRow><IonItem>Error Code: {err?err:'none'}</IonItem></IonRow>\n    </IonGrid>\n  );\n};\n\nexport default PortfolioContainer;\n"]},"metadata":{},"sourceType":"module"}