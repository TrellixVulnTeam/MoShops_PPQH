{"ast":null,"code":"var _jsxFileName = \"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/UploadImageCard.tsx\",\n    _s = $RefreshSig$();\n\n// import firebase from 'firebase/app';\n// import 'firebase/database';\nimport React, { useReducer, useRef, useState } from 'react';\nimport { IonItem, IonInput, IonButton, IonLabel, IonProgressBar, IonImg, IonCard, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCardContent, IonToast } from '@ionic/react';\nimport useFirebaseUpload from \"../../hooks/useFirebaseUpload\";\nimport firebase from '../../Firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imageStateInitial = {\n  imageName: \"\",\n  imageFullPath: \"\",\n  imageDescription: \"test\",\n  imageUrl: \"\"\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'spread':\n      return { ...action.payload\n      };\n\n    case 'dbReplace':\n      return { ...action.payload\n      };\n\n    default:\n      return { ...state,\n        [action.type]: action.payload\n      };\n  }\n};\n\nconst UploadImageCard = ({\n  pageName\n}) => {\n  _s();\n\n  const [{\n    dataResponse,\n    isLoading,\n    isError,\n    progress\n  }, setFileData, clearError, uploadImage, setFileName] = useFirebaseUpload();\n  const [imageState, imageDispatch] = useReducer(reducer, imageStateInitial);\n  const [imgName, setImgName] = useState();\n  const [imgDescription, setImgDescription] = useState();\n  const [imgPreview, setImgPreview] = useState('');\n  const [showToastSuccess, setToastSuccess] = useState(false);\n  const [showToastError, setToastError] = useState(false);\n  const [errorToastText, setErrorToastText] = useState('');\n  const database = firebase.fbApp.database();\n\n  const onSubmitHandler = event => {\n    setFileName(imgName);\n    const img = new Image();\n    img.src = imgPreview;\n\n    if (img.height != 0 && img.width != 0) {\n      uploadImage();\n      pushNewImageEntry(img);\n    } else {\n      setToastError(true);\n      setErrorToastText('Please pick a picture first');\n    }\n  };\n\n  const onSelectFile = (event, inputRef) => {\n    //@ts-ignore\n    const image = inputRef.current.files[0];\n    console.log(image);\n\n    if (inputRef != null && image instanceof File) {\n      console.log('[onSelectFile]: inputref is a file'); //@ts-ignore\n\n      const imgBlob = URL.createObjectURL(image);\n      setFileData(image);\n      setImgPreview(imgBlob);\n      setImgName(image.name);\n      setImgDescription(`An image of ${image.name}`);\n    } else {\n      console.log('[onSelectFile]: inputref is not a file, no file found');\n    }\n  };\n\n  const onNameChangeHandler = event => {\n    console.log(`updating name`);\n    setImgName(event.detail.value);\n  };\n\n  const onDescChangeHandler = event => {\n    console.log(`updating desc`);\n    setImgDescription(event.detail.value);\n  };\n\n  const pushNewImageEntry = img => {\n    img.src = imgPreview || '';\n    database.ref('images/').push({\n      imageDescription: imgDescription,\n      imageName: imgName,\n      imageFullPath: `pictures/${imgName}`,\n      imageWidth: img.width,\n      imageHeight: img.height\n    }, function (error) {\n      if (error) {\n        console.log('[pushNewImageEntry] Upload Failed');\n        console.log(error);\n        console.log(error.name);\n        console.log(error.message);\n        setToastError(true);\n        setErrorToastText(error.message);\n      } else {\n        console.log('[pushNewImageEntry] created entry successfully');\n        setToastSuccess(true);\n        setErrorToastText('success!!!');\n      }\n    });\n  };\n\n  const fileRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(IonCard, {\n    children: [/*#__PURE__*/_jsxDEV(IonCardHeader, {\n      children: [/*#__PURE__*/_jsxDEV(IonCardTitle, {\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IonCardSubtitle, {\n        children: \"Select an image to upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(IonCardContent, {\n      children: [/*#__PURE__*/_jsxDEV(IonItem, {\n        children: /*#__PURE__*/_jsxDEV(IonImg, {\n          src: imgPreview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: fileRef,\n          hidden: true,\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: e => onSelectFile(e, fileRef),\n          onClick: () => {\n            console.log('opening file selector');\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IonButton, {\n          color: \"primary\",\n          onClick: () => {\n            var _fileRef$current;\n\n            //@ts-ignore\n            fileRef === null || fileRef === void 0 ? void 0 : (_fileRef$current = fileRef.current) === null || _fileRef$current === void 0 ? void 0 : _fileRef$current.click();\n          },\n          children: \"Select Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n        children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n          children: \"Image Name: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n          value: imgName,\n          onIonChange: onNameChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n        children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n          children: \"Image Description: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n          value: imgDescription,\n          onIonChange: onDescChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n        children: [/*#__PURE__*/_jsxDEV(IonButton, {\n          color: \"seccondary\",\n          onClick: onSubmitHandler,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), isLoading && progress && /*#__PURE__*/_jsxDEV(IonProgressBar, {\n          value: progress.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), \"//@ts-ignore\", /*#__PURE__*/_jsxDEV(IonToast, {\n        isOpen: showToastSuccess,\n        onDidDismiss: () => setToastSuccess(false),\n        message: \"Success!\",\n        duration: 1200\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IonToast, {\n        isOpen: showToastError,\n        onDidDismiss: () => setToastError(false),\n        message: errorToastText,\n        position: \"top\",\n        duration: 1200,\n        buttons: [{\n          //@ts-ignore\n          text: 'Done',\n          role: 'cancel',\n          handler: () => {\n            console.log('Cancel clicked');\n            setErrorToastText('none');\n          }\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UploadImageCard, \"oGO1IyDxYBvWj/F2X94XF043xcE=\", false, function () {\n  return [useFirebaseUpload];\n});\n\n_c = UploadImageCard;\nexport default UploadImageCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImageCard\");","map":{"version":3,"sources":["/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/UploadImageCard.tsx"],"names":["React","useReducer","useRef","useState","IonItem","IonInput","IonButton","IonLabel","IonProgressBar","IonImg","IonCard","IonCardHeader","IonCardSubtitle","IonCardTitle","IonCardContent","IonToast","useFirebaseUpload","firebase","imageStateInitial","imageName","imageFullPath","imageDescription","imageUrl","reducer","state","action","type","payload","UploadImageCard","pageName","dataResponse","isLoading","isError","progress","setFileData","clearError","uploadImage","setFileName","imageState","imageDispatch","imgName","setImgName","imgDescription","setImgDescription","imgPreview","setImgPreview","showToastSuccess","setToastSuccess","showToastError","setToastError","errorToastText","setErrorToastText","database","fbApp","onSubmitHandler","event","img","Image","src","height","width","pushNewImageEntry","onSelectFile","inputRef","image","current","files","console","log","File","imgBlob","URL","createObjectURL","name","onNameChangeHandler","detail","value","onDescChangeHandler","ref","push","imageWidth","imageHeight","error","message","fileRef","e","click","text","role","handler"],"mappings":"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","sourcesContent":["\n// import firebase from 'firebase/app';\n// import 'firebase/database';\nimport React, { useReducer, useRef, MutableRefObject, useState } from 'react';\nimport { IonItem, IonInput, IonButton, IonLabel, IonProgressBar, IonImg, IonCard, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCardContent, IonToast } from '@ionic/react';\nimport useFirebaseUpload from \"../../hooks/useFirebaseUpload\";\nimport firebase from '../../Firebase';\n\n\n\ninterface ContainerProps {\n    pageName: string;\n}\n\ninterface ImageItem {\n    imageName: String\n    imageFullPath: String\n    imageDescription: String\n    imageUrl: String\n\n}\n\n\nconst imageStateInitial: ImageItem = {\n    imageName: \"\",\n    imageFullPath: \"\",\n    imageDescription: \"test\",\n    imageUrl: \"\"\n}\n\nconst reducer = (state: any, action: any) => {\n    switch (action.type) {\n        case 'spread':\n            return {\n                ...action.payload\n            }\n        case 'dbReplace':\n            return {\n                ...action.payload\n            }\n        default:\n            return {\n                ...state,\n                [action.type]: action.payload\n            }\n    }\n}\n\nconst UploadImageCard: React.FC<ContainerProps> = ({ pageName }) => {\n    const [\n        { dataResponse, isLoading, isError, progress },\n        setFileData,\n        clearError,\n        uploadImage,\n        setFileName\n    ] = useFirebaseUpload();\n    const [imageState, imageDispatch] = useReducer(reducer, imageStateInitial)\n    const [imgName, setImgName] = useState<string>();\n    const [imgDescription, setImgDescription] = useState<string>();\n    const [imgPreview, setImgPreview] = useState<string>('');\n    const [showToastSuccess, setToastSuccess] = useState(false);\n    const [showToastError, setToastError] = useState(false);\n    const [errorToastText, setErrorToastText] = useState('');    \n    const database = firebase.fbApp.database()\n    const onSubmitHandler = (event: any) => {\n        setFileName(imgName);\n        const img = new Image();\n        img.src = imgPreview\n        if(img.height!=0 && img.width!=0){\n            uploadImage();\n            pushNewImageEntry(img);\n        } else {\n                setToastError(true)\n                setErrorToastText('Please pick a picture first')\n                \n            }\n        \n    }\n    const onSelectFile = (event: any, inputRef: MutableRefObject<null>) => {\n        //@ts-ignore\n        const image = inputRef.current.files[0]\n        console.log(image)\n\n        if (inputRef != null && image instanceof File) {\n            console.log('[onSelectFile]: inputref is a file')\n            //@ts-ignore\n            const imgBlob = URL.createObjectURL(image)\n            setFileData(image);\n            setImgPreview(imgBlob);\n            setImgName(image.name);\n            setImgDescription(`An image of ${image.name}`)\n        } else {\n            console.log('[onSelectFile]: inputref is not a file, no file found')\n        }\n    }\n    const onNameChangeHandler = (event:any) => {\n        console.log(`updating name`);\n        setImgName(event.detail.value)\n    }\n    const onDescChangeHandler = (event:any) => {\n        console.log(`updating desc`);\n        setImgDescription(event.detail.value)\n    }\n    const pushNewImageEntry = (img:HTMLImageElement) => {\n       \n            img.src = imgPreview || ''\n            database.ref('images/').push({\n                imageDescription: imgDescription,\n                imageName: imgName,\n                imageFullPath: `pictures/${imgName}`,\n                imageWidth: img.width,\n                imageHeight: img.height\n            }, function (error) {\n                if (error) {\n                    console.log('[pushNewImageEntry] Upload Failed')\n                    console.log(error)\n                    console.log(error.name)\n                    console.log(error.message)\n                    setToastError(true)\n                    setErrorToastText(error.message)\n                } else {\n                    console.log('[pushNewImageEntry] created entry successfully')\n                    setToastSuccess(true)\n                    setErrorToastText('success!!!')\n                }\n            })\n        } \n    const fileRef = useRef(null)\n    return (\n        <IonCard>\n            <IonCardHeader>\n                <IonCardTitle>Upload</IonCardTitle>\n                <IonCardSubtitle>Select an image to upload</IonCardSubtitle>\n            </IonCardHeader>\n            <IonCardContent>\n                <IonItem>\n                    <IonImg src={imgPreview} />\n                </IonItem>\n                <IonItem>\n                    <input ref={fileRef} hidden type=\"file\" accept=\"image/*\" onChange={(e) => onSelectFile(e, fileRef)} onClick={() => { console.log('opening file selector') }} />\n                    <IonButton color=\"primary\"\n                        onClick={\n                            () => {\n                                //@ts-ignore\n                                fileRef?.current?.click();\n                            }\n                    }>\n                    Select Image\n                    </IonButton>\n                </IonItem>\n                <IonItem>\n                    <IonLabel>Image Name: </IonLabel>\n                    <IonInput value={imgName} onIonChange={onNameChangeHandler}></IonInput>\n                </IonItem>\n                <IonItem>\n                    <IonLabel>Image Description: </IonLabel>\n                    <IonInput value={imgDescription} onIonChange={onDescChangeHandler}></IonInput>\n                </IonItem>\n                <IonItem>\n                    <IonButton\n                        color=\"seccondary\" onClick={onSubmitHandler}>\n                        Submit\n                        </IonButton>\n                    {/* get loading information from hook and display progress if necessary */}\n                    {isLoading && progress && (\n                        <IonProgressBar value={progress.value}></IonProgressBar>\n                    )}\n                </IonItem>\n                //@ts-ignore\n                <IonToast\n                    isOpen={showToastSuccess}\n                    onDidDismiss={() => setToastSuccess(false)}\n                    message=\"Success!\"\n                    duration={1200}\n                />\n                 <IonToast\n                    isOpen={showToastError}\n                    onDidDismiss={() => setToastError(false)}\n                    message={errorToastText}\n                    position=\"top\"\n                    duration={1200}\n                    buttons={[\n                    \n                    {\n                        //@ts-ignore\n                        text: 'Done',\n                        role: 'cancel',\n                        handler: () => {\n                        console.log('Cancel clicked');\n                        setErrorToastText('none')\n                        }\n                    }\n                    ]}\n                />\n            </IonCardContent>\n        </IonCard>\n    )\n}\nexport default UploadImageCard;"]},"metadata":{},"sourceType":"module"}