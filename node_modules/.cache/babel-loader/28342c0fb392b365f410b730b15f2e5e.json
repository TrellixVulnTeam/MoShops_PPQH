{"ast":null,"code":"var _jsxFileName = \"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/CreatePortfolioEntryCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useState, useEffect } from 'react';\nimport { IonCard, IonCardHeader, IonCardTitle, IonCardSubtitle, IonCardContent, IonList, IonItemDivider, IonItem, IonInput, IonLabel, IonSelect, IonImg, IonSelectOption, IonButton, IonGrid, IonRow, IonCol, IonIcon } from '@ionic/react';\nimport firebase from '../../Firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n;\n;\nconst imageStateInitial = {\n  imageName: \"\",\n  imageFullPath: \"\",\n  imageDescription: \"test\",\n  imageUrl: \"\"\n};\nconst portfolioStateInitial = {\n  itemName: '',\n  itemDescription: '',\n  creationDate: '',\n  imgLocation: \"\",\n  groupLocation: \"\"\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'spread':\n      return { ...action.payload\n      };\n\n    case 'dbReplace':\n      return { ...action.payload\n      };\n\n    case 'selectedImages':\n      return { ...state,\n        'selectedImages': [...state.selectedImages, action.payload]\n      };\n\n    default:\n      return { ...state,\n        [action.type]: action.payload\n      };\n  }\n};\n\nconst CreatePortfolioEntryCard = ({\n  name\n}) => {\n  _s();\n\n  //blueprint for database entries for reference\n  //declaring multiple state variables\n  //state has portfolioId, pictureGroupId, inventoryId\n  const [portfolioState, portfolioDispatch] = useReducer(reducer, portfolioStateInitial);\n  const [imageState, imageDispatch] = useReducer(reducer, imageStateInitial);\n  const [allStorageImgs, updateAllStorageImgs] = useReducer(reducer, {});\n  const [allDbImages, updateDbImages] = useReducer(reducer, {});\n  const [selectedImg, updateSelectedImg] = useState(\"\"); //const [imgBank, updateImgBank] = useReducer(reducer, {selectedImages:[]})\n\n  const [imgBank, updateImgBank] = useState([]);\n  const [selectedGroup, updateSelectedGroup] = useState();\n  const storageRef = firebase.fbApp.storage().ref();\n  const database = firebase.fbApp.database();\n  var listRef = storageRef.child('pictures');\n\n  const onChangeHandlerPortfolio = event => {\n    portfolioDispatch({\n      type: event.target.name,\n      payload: event.detail.value\n    });\n  };\n\n  useEffect(() => {\n    listRef.listAll().then(function (res) {\n      res.items.forEach(function (itemRef) {\n        itemRef.getDownloadURL().then(function (url) {\n          updateAllStorageImgs({\n            type: itemRef.name,\n            //@ts-ignore\n            payload: {\n              imageUrl: url,\n              imageName: itemRef.name,\n              imageFullPath: itemRef.fullPath\n            }\n          });\n        });\n      });\n    }).catch(function (error) {\n      console.log('error getting pictures references');\n    });\n    database.ref('images/').once('value').then(function (snapshot) {\n      updateDbImages({\n        type: \"dbReplace\",\n        payload: snapshot.val()\n      });\n    });\n  }, []);\n\n  const pushNewPortfolioEntry = event => {\n    database.ref('portfolio/').push({\n      itemName: portfolioState.itemName,\n      itemDescription: portfolioState.itemDescription,\n      imgArr: imgBank,\n      creationDate: portfolioState.creationDate\n    });\n  };\n\n  const onSelectDropdownImgPortfolio = event => {\n    if (event.detail.value) {\n      console.log(`[onSelectDropdownImgPortfolio]: ${event.detail.value}`); //console.log(allDbImages)\n\n      const imageRef = allDbImages[event.detail.value];\n      const newImgBank = [...imgBank, event.detail.value];\n      updateImgBank(newImgBank);\n    }\n  };\n\n  const removeImageHandler = (event, index) => {\n    if (imgBank[index]) {\n      console.log(`removing ${imgBank[index]}`);\n      const removedImage = imgBank.splice(index, 1);\n      updateImgBank(imgBank);\n    }\n  };\n\n  const imageOptions = Object.entries(allStorageImgs).map((key, value) => {\n    //@ts-ignore\n    return /*#__PURE__*/_jsxDEV(IonSelectOption, {\n      value: key[0],\n      children: key[1].imageName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 16\n    }, this);\n  }); //console.log(dbImages)\n\n  const dbImageOptions = Object.entries(allDbImages).map((key, value) => {\n    //console.log(key[0])\n    //@ts-ignore\n    return /*#__PURE__*/_jsxDEV(IonSelectOption, {\n      value: key[0],\n      children: key[1].imageDescription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 16\n    }, this);\n  }); //const selectedImages = false\n\n  const selectedImages = imgBank.map((selectedImg, index) => {\n    console.log(`[selectedImages]: selected image: ${selectedImg}`);\n\n    if (selectedImg) {\n      console.log(allDbImages[selectedImg].imageName);\n      console.log(allStorageImgs);\n      return /*#__PURE__*/_jsxDEV(IonRow, {\n        children: [/*#__PURE__*/_jsxDEV(IonCol, {\n          size: \"2\",\n          children: /*#__PURE__*/_jsxDEV(IonImg, {\n            src: allStorageImgs[allDbImages[selectedImg].imageName] ? allStorageImgs[allDbImages[selectedImg].imageName].imageUrl : false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(IonCol, {\n          className: \"ion-align-self-end\",\n          children: /*#__PURE__*/_jsxDEV(IonButton, {\n            color: \"danger\",\n            onClick: e => removeImageHandler(e, index),\n            children: /*#__PURE__*/_jsxDEV(IonIcon, {\n              name: \"close-circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 20\n      }, this);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(IonItem, {\n    children: /*#__PURE__*/_jsxDEV(IonCard, {\n      children: [/*#__PURE__*/_jsxDEV(IonCardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(IonCardTitle, {\n          children: \"Create Entry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IonCardSubtitle, {\n          children: \"for Portfolio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IonCardContent, {\n        children: /*#__PURE__*/_jsxDEV(IonItem, {\n          children: /*#__PURE__*/_jsxDEV(IonList, {\n            children: [/*#__PURE__*/_jsxDEV(IonItemDivider, {\n              color: \"secondary\",\n              children: \"Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n              children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n                children: \"Name: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n                value: portfolioState.itemName,\n                name: \"itemName\",\n                placeholder: \"...\",\n                onIonChange: e => onChangeHandlerPortfolio(e)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n              children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n                children: \"Description: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n                value: portfolioState.itemDescription,\n                name: \"itemDescription\",\n                placeholder: \"...\",\n                onIonChange: e => onChangeHandlerPortfolio(e)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n              children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n                children: \"Creation Date: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n                value: portfolioState.creationDate,\n                name: \"creationDate\",\n                placeholder: \"...\",\n                onIonChange: e => onChangeHandlerPortfolio(e)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(IonItemDivider, {\n              color: \"secondary\",\n              children: \"Link to Pictures / Groups\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n              children: [\"Image Location: \", portfolioState.imgLocation]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n              children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n                children: \"Selected Images:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(IonSelect, {\n                value: selectedImg,\n                okText: \"Okay\",\n                cancelText: \"Dismiss\",\n                onIonChange: e => onSelectDropdownImgPortfolio(e),\n                children: dbImageOptions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n              children: /*#__PURE__*/_jsxDEV(IonGrid, {\n                fixed: true,\n                children: /*#__PURE__*/_jsxDEV(IonRow, {\n                  children: selectedImages ? selectedImages : 'not loaded'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n              children: /*#__PURE__*/_jsxDEV(IonButton, {\n                color: \"seccondary\",\n                onClick: e => pushNewPortfolioEntry(e),\n                children: \"Create!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreatePortfolioEntryCard, \"E+zuxHOMPWhlxvx0rPE+vCK3fiY=\");\n\n_c = CreatePortfolioEntryCard;\nexport default CreatePortfolioEntryCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePortfolioEntryCard\");","map":{"version":3,"sources":["/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/CreatePortfolioEntryCard.tsx"],"names":["React","useReducer","useState","useEffect","IonCard","IonCardHeader","IonCardTitle","IonCardSubtitle","IonCardContent","IonList","IonItemDivider","IonItem","IonInput","IonLabel","IonSelect","IonImg","IonSelectOption","IonButton","IonGrid","IonRow","IonCol","IonIcon","firebase","imageStateInitial","imageName","imageFullPath","imageDescription","imageUrl","portfolioStateInitial","itemName","itemDescription","creationDate","imgLocation","groupLocation","reducer","state","action","type","payload","selectedImages","CreatePortfolioEntryCard","name","portfolioState","portfolioDispatch","imageState","imageDispatch","allStorageImgs","updateAllStorageImgs","allDbImages","updateDbImages","selectedImg","updateSelectedImg","imgBank","updateImgBank","selectedGroup","updateSelectedGroup","storageRef","fbApp","storage","ref","database","listRef","child","onChangeHandlerPortfolio","event","target","detail","value","listAll","then","res","items","forEach","itemRef","getDownloadURL","url","fullPath","catch","error","console","log","once","snapshot","val","pushNewPortfolioEntry","push","imgArr","onSelectDropdownImgPortfolio","imageRef","newImgBank","removeImageHandler","index","removedImage","splice","imageOptions","Object","entries","map","key","dbImageOptions","e"],"mappings":"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","sourcesContent":["import React, { useReducer, useState, useEffect } from 'react';\n\nimport { IonContent, IonCard, IonCardHeader, IonCardTitle, IonCardSubtitle, IonCardContent, IonList, IonItemDivider, IonItem, IonInput, IonLabel, IonSelect, IonImg, IonSelectOption, IonButton, IonGrid, IonRow, IonCol, IonIcon } from '@ionic/react';\nimport firebase from '../../Firebase';\n\ninterface ContainerProps {\n    name: string;\n}\ninterface PortfolioItem {\n    itemName: String\n    itemDescription: String\n    imgLocation: String\n    groupLocation: String\n    creationDate: String\n};\ninterface StoreItem {\n    itemName: String\n    itemDescription: String\n    imgLocation: String\n    groupLocation: String\n    price: String\n};\ninterface ImageItem {\n    imageName: String\n    imageFullPath: String\n    imageDescription: String\n    imageUrl: String\n\n}\ninterface PictureGroup {\n    //might need to be array of strings\n    imageId: String\n};\nconst imageStateInitial: ImageItem = {\n    imageName: \"\",\n    imageFullPath: \"\",\n    imageDescription: \"test\",\n    imageUrl: \"\"\n}\nconst portfolioStateInitial: PortfolioItem = {\n    itemName: '',\n    itemDescription: '',\n    creationDate: '',\n    imgLocation: \"\",\n    groupLocation: \"\"\n};\n\nconst reducer = (state: any, action: any) => {\n    switch (action.type) {\n        case 'spread':\n            return {\n                ...action.payload\n            }\n        case 'dbReplace':\n            return {\n                ...action.payload\n            }\n        case 'selectedImages':\n            return {\n                ...state,\n                'selectedImages': [\n                    ...state.selectedImages,\n                    action.payload\n                ],\n            }\n        default:\n            return {\n                ...state,\n                [action.type]: action.payload\n            }\n    }\n}\n\nconst CreatePortfolioEntryCard: React.FC<ContainerProps> = ({ name }) => {\n    //blueprint for database entries for reference\n\n    //declaring multiple state variables\n    //state has portfolioId, pictureGroupId, inventoryId\n    const [portfolioState, portfolioDispatch] = useReducer(reducer, portfolioStateInitial)\n    const [imageState, imageDispatch] = useReducer(reducer, imageStateInitial)\n    const [allStorageImgs, updateAllStorageImgs] = useReducer(reducer, {})\n    const [allDbImages, updateDbImages] = useReducer(reducer, {})\n    const [selectedImg, updateSelectedImg] = useState<string>(\"\")\n    //const [imgBank, updateImgBank] = useReducer(reducer, {selectedImages:[]})\n    const [imgBank, updateImgBank] = useState<Array<string>>([])\n    const [selectedGroup, updateSelectedGroup] = useState<string>()\n    const storageRef = firebase.fbApp.storage().ref();\n    const database = firebase.fbApp.database()\n    var listRef = storageRef.child('pictures');\n\n\n\n    const onChangeHandlerPortfolio = (event: any) => {\n        portfolioDispatch({\n            type: event.target.name,\n            payload: event.detail.value,\n        })\n    }\n    useEffect(() => {\n        listRef.listAll().then(function (res) {\n            res.items.forEach(function (itemRef) {\n                itemRef.getDownloadURL().then(function (url) {\n                    updateAllStorageImgs({\n                        type: itemRef.name,\n                        //@ts-ignore\n                        payload: {\n                            imageUrl: url,\n                            imageName: itemRef.name,\n                            imageFullPath: itemRef.fullPath\n                        }\n                    });\n                })\n\n            });\n        }).catch(function (error) {\n            console.log('error getting pictures references')\n        });\n        database.ref('images/').once('value').then(function (snapshot) {\n            updateDbImages({\n                type: \"dbReplace\",\n                payload: snapshot.val()\n            });\n        })\n    }, [])\n\n    const pushNewPortfolioEntry = (event: any) => {\n        database.ref('portfolio/').push({\n            itemName: portfolioState.itemName,\n            itemDescription: portfolioState.itemDescription,\n            imgArr: imgBank,\n            creationDate: portfolioState.creationDate\n        })\n    }\n\n    const onSelectDropdownImgPortfolio = (event: any) => {\n        if (event.detail.value) {\n            console.log(`[onSelectDropdownImgPortfolio]: ${event.detail.value}`)\n            //console.log(allDbImages)\n            const imageRef = allDbImages[event.detail.value]\n            const newImgBank = [...imgBank, event.detail.value]\n            updateImgBank(newImgBank)\n        }\n    }\n    const removeImageHandler = (event: React.MouseEvent<HTMLIonButtonElement, MouseEvent>, index: number) => {\n        if(imgBank[index]){\n        console.log(`removing ${imgBank[index]}`);\n        const removedImage = imgBank.splice(index, 1);\n        updateImgBank(imgBank);\n        }\n    }\n    const imageOptions = Object.entries(allStorageImgs).map((key, value) => {\n        //@ts-ignore\n        return <IonSelectOption value={key[0]}>{key[1].imageName}</IonSelectOption>\n    })\n    //console.log(dbImages)\n    const dbImageOptions = Object.entries(allDbImages).map((key, value) => {\n        //console.log(key[0])\n        //@ts-ignore\n        return <IonSelectOption value={key[0]}>{key[1].imageDescription}</IonSelectOption>\n    })\n    //const selectedImages = false\n    const selectedImages = imgBank.map((selectedImg: string | number, index: number) => {\n        console.log(`[selectedImages]: selected image: ${selectedImg}`)\n        if (selectedImg) {\n            console.log(allDbImages[selectedImg].imageName)\n            console.log(allStorageImgs)\n            return <IonRow>\n                <IonCol size=\"2\">\n                    <IonImg src={allStorageImgs[allDbImages[selectedImg].imageName] ? allStorageImgs[allDbImages[selectedImg].imageName].imageUrl : false} />\n                </IonCol>\n                <IonCol className=\"ion-align-self-end\">\n                    <IonButton color=\"danger\" onClick={(e) => removeImageHandler(e, index)}>\n                        <IonIcon name=\"close-circle\" />\n                    </IonButton>\n\n                </IonCol>\n\n            </IonRow>\n        }\n    });\n\n    return (\n        <IonItem>\n\n            <IonCard>\n                <IonCardHeader>\n                    <IonCardTitle>Create Entry</IonCardTitle>\n                    <IonCardSubtitle>for Portfolio</IonCardSubtitle>\n                </IonCardHeader>\n                <IonCardContent>\n                    <IonItem>\n                        <IonList>\n                            <IonItemDivider color=\"secondary\">\n                                Details\n                </IonItemDivider>\n                            <IonItem>\n                                <IonLabel>Name: </IonLabel>\n                                <IonInput value={portfolioState.itemName} name='itemName' placeholder=\"...\" onIonChange={e => onChangeHandlerPortfolio(e!)}></IonInput>\n                            </IonItem>\n\n                            <IonItem>\n                                <IonLabel>Description: </IonLabel>\n                                <IonInput value={portfolioState.itemDescription} name='itemDescription' placeholder=\"...\" onIonChange={e => onChangeHandlerPortfolio(e!)}></IonInput>\n                            </IonItem>\n\n                            <IonItem>\n                                <IonLabel>Creation Date: </IonLabel>\n                                <IonInput value={portfolioState.creationDate} name='creationDate' placeholder=\"...\" onIonChange={e => onChangeHandlerPortfolio(e!)}></IonInput>\n                            </IonItem>\n                            <IonItemDivider color=\"secondary\">\n                                Link to Pictures / Groups\n                        </IonItemDivider>\n                            <IonItem>Image Location: {portfolioState.imgLocation}</IonItem>\n                            <IonItem>\n                                <IonLabel>Selected Images:</IonLabel>\n                                <IonSelect value={selectedImg} okText=\"Okay\" cancelText=\"Dismiss\" onIonChange={e => onSelectDropdownImgPortfolio(e!)}>\n                                    {dbImageOptions}\n                                </IonSelect>\n                            </IonItem>\n\n                            <IonItem>\n                                <IonGrid fixed>\n                                    <IonRow>\n                                        {selectedImages ? selectedImages : 'not loaded'}\n                                    </IonRow>\n                                </IonGrid>\n                            </IonItem>\n                            <IonItem>\n                                <IonButton\n                                    color=\"seccondary\" onClick={(e) => pushNewPortfolioEntry(e!)}>\n                                    Create!\n                            </IonButton>\n                            </IonItem>\n                        </IonList>\n                    </IonItem>\n                </IonCardContent>\n            </IonCard>\n\n        </IonItem>\n    )\n};\n\nexport default CreatePortfolioEntryCard;\n"]},"metadata":{},"sourceType":"module"}