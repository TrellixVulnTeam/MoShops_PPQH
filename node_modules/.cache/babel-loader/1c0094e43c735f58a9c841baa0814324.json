{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport * as firebaseui from 'firebaseui';\nlet config = {\n  apiKey: \"AIzaSyB4yfSiY27D9ET6cgRhMMI-mek9I9zfC20\",\n  authDomain: \"morgansite.firebaseapp.com\",\n  databaseURL: \"https://morgansite.firebaseio.com\",\n  projectId: \"morgansite\",\n  storageBucket: \"morgansite.appspot.com\",\n  messagingSenderId: \"136503459016\",\n  appId: \"1:136503459016:web:17b2950d308683a365f9fd\",\n  measurementId: \"G-2H1QE6B9DZ\"\n};\nconst fbApp = !firebase.apps.length ? firebase.initializeApp(config) : firebase.app();\nfirebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION) //local > session > none\n.then(function () {// Existing and future Auth states are now persisted in the current\n  // session only. Closing the window would clear any existing state even\n  // if a user forgets to sign out.\n  // ...\n  // New sign-in will be persisted with session persistence.\n  //return project.auth().signInWithEmailAndPassword(email, password);\n}).catch(function (error) {\n  // Handle Errors here.\n  var errorCode = error.code;\n  var errorMessage = error.message;\n  console.log(`Error code:${errorCode}. Error Message:${errorMessage}`);\n});\nlet name, email, photoUrl, uid, emailVerified; // firebase.auth().onAuthStateChanged(function (user) {\n//     if (user) {\n//         // User is signed in.\n//         //console.log(\"tou're a user\")\n//         name = user.displayName;\n//         email = user.email;\n//         photoUrl = user.photoURL;\n//         emailVerified = user.emailVerified;\n//         uid = user.uid; \n//         // The user's ID, unique to the Firebase project. Do NOT use\n//         // this value to authenticate with your backend server, if\n//         // you have one. Use User.getToken() instead.\n//         token = user.getIdToken\n//         //[TODO] make an index signature for user\n//         console.log('[Firebase]: auth state changed, hello', user.displayName)\n//     } else {\n//         // No user is signed in.\n//         console.log('[Firebase]:auth state changed, no valid user object')\n//     }\n// });\n\nlet userRef = firebase.auth().currentUser;\nlet user = {\n  user: userRef\n}; // if (user != null) {\n//     name = user.displayName;\n//     email = user.email;\n//     photoUrl = user.photoURL;\n//     emailVerified = user.emailVerified;\n//     uid = user.uid; \n//     // The user's ID, unique to the Firebase project. Do NOT use\n//     // this value to authenticate with your backend server, if\n//     // you have one. Use User.getToken() instead.\n//     token = user.getIdToken\n// } else {\n//     // No user is signed in.\n//     console.log('[Firebase]:user value is null')\n// }\n\nconst ui = new firebaseui.auth.AuthUI(firebase.auth());\nconst uiConfig = {\n  callbacks: {\n    signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n      // User successfully signed in.\n      // Return type determines whether we continue the redirect automatically\n      // or whether we leave that to developer to handle.\n      console.log(authResult, redirectUrl);\n      return false;\n    },\n    uiShown: function () {// The widget is rendered.\n      // Hide the loader.\n    }\n  },\n  // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n  signInFlow: 'popup',\n  signInSuccessUrl: '',\n  signInOptions: [// Leave the lines as is for the providers you want to offer your users.\n  firebase.auth.GoogleAuthProvider.PROVIDER_ID, //firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n  //firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n  //firebase.auth.GithubAuthProvider.PROVIDER_ID,\n  firebase.auth.EmailAuthProvider.PROVIDER_ID //firebase.auth.PhoneAuthProvider.PROVIDER_ID\n  ],\n  // Terms of service url.\n  tosUrl: '<your-tos-url>',\n  // Privacy policy url.\n  privacyPolicyUrl: '<your-privacy-policy-url>'\n};\nconst myExport = {\n  fbApp,\n  ui,\n  uiConfig,\n  user,\n  name,\n  email,\n  photoUrl,\n  uid,\n  emailVerified\n};\nexport default myExport;","map":{"version":3,"sources":["/Users/drew/Documents/Development/Morgan_Site/MoShops/src/Firebase.tsx"],"names":["firebase","firebaseui","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","fbApp","apps","length","initializeApp","app","auth","setPersistence","Auth","Persistence","SESSION","then","catch","error","errorCode","code","errorMessage","message","console","log","name","email","photoUrl","uid","emailVerified","userRef","currentUser","user","ui","AuthUI","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","uiShown","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","tosUrl","privacyPolicyUrl","myExport"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth'\n\nimport * as firebaseui from 'firebaseui';\n\nlet config = {\n    apiKey: \"AIzaSyB4yfSiY27D9ET6cgRhMMI-mek9I9zfC20\",\n    authDomain: \"morgansite.firebaseapp.com\",\n    databaseURL: \"https://morgansite.firebaseio.com\",\n    projectId: \"morgansite\",\n    storageBucket: \"morgansite.appspot.com\",\n    messagingSenderId: \"136503459016\",\n    appId: \"1:136503459016:web:17b2950d308683a365f9fd\",\n    measurementId: \"G-2H1QE6B9DZ\",\n};\nconst fbApp = !firebase.apps.length ? firebase.initializeApp(config) : firebase.app();\nfirebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)\n    //local > session > none\n    .then(function () {\n        // Existing and future Auth states are now persisted in the current\n        // session only. Closing the window would clear any existing state even\n        // if a user forgets to sign out.\n        // ...\n        // New sign-in will be persisted with session persistence.\n        //return project.auth().signInWithEmailAndPassword(email, password);\n    })\n    .catch(function (error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        console.log(`Error code:${errorCode}. Error Message:${errorMessage}`)\n    });\nlet name, email, photoUrl, uid, emailVerified;\n// firebase.auth().onAuthStateChanged(function (user) {\n\n//     if (user) {\n//         // User is signed in.\n//         //console.log(\"tou're a user\")\n//         name = user.displayName;\n//         email = user.email;\n//         photoUrl = user.photoURL;\n//         emailVerified = user.emailVerified;\n//         uid = user.uid; \n//         // The user's ID, unique to the Firebase project. Do NOT use\n//         // this value to authenticate with your backend server, if\n//         // you have one. Use User.getToken() instead.\n//         token = user.getIdToken\n//         //[TODO] make an index signature for user\n//         console.log('[Firebase]: auth state changed, hello', user.displayName)\n//     } else {\n//         // No user is signed in.\n//         console.log('[Firebase]:auth state changed, no valid user object')\n//     }\n// });\nlet userRef = firebase.auth().currentUser;\nlet user = {user:userRef}\n// if (user != null) {\n//     name = user.displayName;\n//     email = user.email;\n//     photoUrl = user.photoURL;\n//     emailVerified = user.emailVerified;\n//     uid = user.uid; \n//     // The user's ID, unique to the Firebase project. Do NOT use\n//     // this value to authenticate with your backend server, if\n//     // you have one. Use User.getToken() instead.\n//     token = user.getIdToken\n// } else {\n//     // No user is signed in.\n//     console.log('[Firebase]:user value is null')\n// }\nconst ui = new firebaseui.auth.AuthUI(firebase.auth());\nconst uiConfig = {\n    callbacks: {\n        signInSuccessWithAuthResult: function (authResult: any, redirectUrl: any) {\n            // User successfully signed in.\n            // Return type determines whether we continue the redirect automatically\n            // or whether we leave that to developer to handle.\n            console.log(authResult, redirectUrl)\n            return false;\n        },\n        uiShown: function () {\n            // The widget is rendered.\n            // Hide the loader.\n\n        }\n    },\n    // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n    signInFlow: 'popup',\n    signInSuccessUrl: '',\n    signInOptions: [\n        // Leave the lines as is for the providers you want to offer your users.\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n        //firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n        //firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n        //firebase.auth.GithubAuthProvider.PROVIDER_ID,\n        firebase.auth.EmailAuthProvider.PROVIDER_ID,\n        //firebase.auth.PhoneAuthProvider.PROVIDER_ID\n    ],\n    // Terms of service url.\n    tosUrl: '<your-tos-url>',\n    // Privacy policy url.\n    privacyPolicyUrl: '<your-privacy-policy-url>'\n};\nconst myExport =  { fbApp, ui, uiConfig, user, name, email, photoUrl, uid, emailVerified }\nexport default myExport"]},"metadata":{},"sourceType":"module"}