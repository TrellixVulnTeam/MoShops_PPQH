{"ast":null,"code":"import firebase from'firebase/app';import'firebase/auth';import*as firebaseui from'firebaseui';var config={apiKey:\"AIzaSyB4yfSiY27D9ET6cgRhMMI-mek9I9zfC20\",authDomain:\"morgansite.firebaseapp.com\",databaseURL:\"https://morgansite.firebaseio.com\",projectId:\"morgansite\",storageBucket:\"morgansite.appspot.com\",messagingSenderId:\"136503459016\",appId:\"1:136503459016:web:17b2950d308683a365f9fd\",measurementId:\"G-2H1QE6B9DZ\"};var fbApp=!firebase.apps.length?firebase.initializeApp(config):firebase.app();firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)//local > session > none\n.then(function(){// Existing and future Auth states are now persisted in the current\n// session only. Closing the window would clear any existing state even\n// if a user forgets to sign out.\n// ...\n// New sign-in will be persisted with session persistence.\n//return project.auth().signInWithEmailAndPassword(email, password);\n}).catch(function(error){// Handle Errors here.\nvar errorCode=error.code;var errorMessage=error.message;console.log(\"Error code:\".concat(errorCode,\". Error Message:\").concat(errorMessage));});var name,email,photoUrl,uid,emailVerified;// firebase.auth().onAuthStateChanged(function (user) {\n//     if (user) {\n//         // User is signed in.\n//         //console.log(\"tou're a user\")\n//         name = user.displayName;\n//         email = user.email;\n//         photoUrl = user.photoURL;\n//         emailVerified = user.emailVerified;\n//         uid = user.uid; \n//         // The user's ID, unique to the Firebase project. Do NOT use\n//         // this value to authenticate with your backend server, if\n//         // you have one. Use User.getToken() instead.\n//         token = user.getIdToken\n//         //[TODO] make an index signature for user\n//         console.log('[Firebase]: auth state changed, hello', user.displayName)\n//     } else {\n//         // No user is signed in.\n//         console.log('[Firebase]:auth state changed, no valid user object')\n//     }\n// });\nvar userRef=firebase.auth().currentUser;var user={user:userRef};// if (user != null) {\n//     name = user.displayName;\n//     email = user.email;\n//     photoUrl = user.photoURL;\n//     emailVerified = user.emailVerified;\n//     uid = user.uid; \n//     // The user's ID, unique to the Firebase project. Do NOT use\n//     // this value to authenticate with your backend server, if\n//     // you have one. Use User.getToken() instead.\n//     token = user.getIdToken\n// } else {\n//     // No user is signed in.\n//     console.log('[Firebase]:user value is null')\n// }\nvar ui=new firebaseui.auth.AuthUI(firebase.auth());var uiConfig={callbacks:{signInSuccessWithAuthResult:function signInSuccessWithAuthResult(authResult,redirectUrl){// User successfully signed in.\n// Return type determines whether we continue the redirect automatically\n// or whether we leave that to developer to handle.\nconsole.log(authResult,redirectUrl);return false;},uiShown:function uiShown(){// The widget is rendered.\n// Hide the loader.\n}},// Will use popup for IDP Providers sign-in flow instead of the default, redirect.\nsignInFlow:'popup',signInSuccessUrl:'',signInOptions:[// Leave the lines as is for the providers you want to offer your users.\nfirebase.auth.GoogleAuthProvider.PROVIDER_ID,//firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n//firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n//firebase.auth.GithubAuthProvider.PROVIDER_ID,\nfirebase.auth.EmailAuthProvider.PROVIDER_ID//firebase.auth.PhoneAuthProvider.PROVIDER_ID\n],// Terms of service url.\ntosUrl:'<your-tos-url>',// Privacy policy url.\nprivacyPolicyUrl:'<your-privacy-policy-url>'};var myExport={fbApp:fbApp,ui:ui,uiConfig:uiConfig,user:user,name:name,email:email,photoUrl:photoUrl,uid:uid,emailVerified:emailVerified};export default myExport;","map":{"version":3,"sources":["/Users/drew/Documents/Development/Morgan_Site/MoShops/src/Firebase.tsx"],"names":["firebase","firebaseui","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","fbApp","apps","length","initializeApp","app","auth","setPersistence","Auth","Persistence","SESSION","then","catch","error","errorCode","code","errorMessage","message","console","log","name","email","photoUrl","uid","emailVerified","userRef","currentUser","user","ui","AuthUI","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","uiShown","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","tosUrl","privacyPolicyUrl","myExport"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth'\n\nimport * as firebaseui from 'firebaseui';\n\nlet config = {\n    apiKey: \"AIzaSyB4yfSiY27D9ET6cgRhMMI-mek9I9zfC20\",\n    authDomain: \"morgansite.firebaseapp.com\",\n    databaseURL: \"https://morgansite.firebaseio.com\",\n    projectId: \"morgansite\",\n    storageBucket: \"morgansite.appspot.com\",\n    messagingSenderId: \"136503459016\",\n    appId: \"1:136503459016:web:17b2950d308683a365f9fd\",\n    measurementId: \"G-2H1QE6B9DZ\",\n};\nconst fbApp = !firebase.apps.length ? firebase.initializeApp(config) : firebase.app();\nfirebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)\n    //local > session > none\n    .then(function () {\n        // Existing and future Auth states are now persisted in the current\n        // session only. Closing the window would clear any existing state even\n        // if a user forgets to sign out.\n        // ...\n        // New sign-in will be persisted with session persistence.\n        //return project.auth().signInWithEmailAndPassword(email, password);\n    })\n    .catch(function (error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        console.log(`Error code:${errorCode}. Error Message:${errorMessage}`)\n    });\nlet name, email, photoUrl, uid, emailVerified;\n// firebase.auth().onAuthStateChanged(function (user) {\n\n//     if (user) {\n//         // User is signed in.\n//         //console.log(\"tou're a user\")\n//         name = user.displayName;\n//         email = user.email;\n//         photoUrl = user.photoURL;\n//         emailVerified = user.emailVerified;\n//         uid = user.uid; \n//         // The user's ID, unique to the Firebase project. Do NOT use\n//         // this value to authenticate with your backend server, if\n//         // you have one. Use User.getToken() instead.\n//         token = user.getIdToken\n//         //[TODO] make an index signature for user\n//         console.log('[Firebase]: auth state changed, hello', user.displayName)\n//     } else {\n//         // No user is signed in.\n//         console.log('[Firebase]:auth state changed, no valid user object')\n//     }\n// });\nlet userRef = firebase.auth().currentUser;\nlet user = {user:userRef}\n// if (user != null) {\n//     name = user.displayName;\n//     email = user.email;\n//     photoUrl = user.photoURL;\n//     emailVerified = user.emailVerified;\n//     uid = user.uid; \n//     // The user's ID, unique to the Firebase project. Do NOT use\n//     // this value to authenticate with your backend server, if\n//     // you have one. Use User.getToken() instead.\n//     token = user.getIdToken\n// } else {\n//     // No user is signed in.\n//     console.log('[Firebase]:user value is null')\n// }\nconst ui = new firebaseui.auth.AuthUI(firebase.auth());\nconst uiConfig = {\n    callbacks: {\n        signInSuccessWithAuthResult: function (authResult: any, redirectUrl: any) {\n            // User successfully signed in.\n            // Return type determines whether we continue the redirect automatically\n            // or whether we leave that to developer to handle.\n            console.log(authResult, redirectUrl)\n            return false;\n        },\n        uiShown: function () {\n            // The widget is rendered.\n            // Hide the loader.\n\n        }\n    },\n    // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n    signInFlow: 'popup',\n    signInSuccessUrl: '',\n    signInOptions: [\n        // Leave the lines as is for the providers you want to offer your users.\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n        //firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n        //firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n        //firebase.auth.GithubAuthProvider.PROVIDER_ID,\n        firebase.auth.EmailAuthProvider.PROVIDER_ID,\n        //firebase.auth.PhoneAuthProvider.PROVIDER_ID\n    ],\n    // Terms of service url.\n    tosUrl: '<your-tos-url>',\n    // Privacy policy url.\n    privacyPolicyUrl: '<your-privacy-policy-url>'\n};\nconst myExport =  { fbApp, ui, uiConfig, user, name, email, photoUrl, uid, emailVerified }\nexport default myExport"]},"metadata":{},"sourceType":"module"}