{"ast":null,"code":"import _regeneratorRuntime from\"/Users/drew/Documents/Development/Morgan_Site/MoShops/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/drew/Documents/Development/Morgan_Site/MoShops/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/drew/Documents/Development/Morgan_Site/MoShops/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";import firebase from'firebase/app';import firebaseApp from'../Firebase';// defining types...\n// the firebase reference to storage\nvar storageRef=firebaseApp.fbApp.storage().ref();function FirebaseFileUploadApi(){// the data from the file upload response\nvar _useState=useState(),_useState2=_slicedToArray(_useState,2),dataResponse=_useState2[0],setDataResponse=_useState2[1];// sets properties on the file to be uploaded\nvar _useState3=useState(),_useState4=_slicedToArray(_useState3,2),fileData=_useState4[0],setFileData=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),fileName=_useState6[0],setFileName=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),upload=_useState8[0],setUpload=_useState8[1];// if we are loading a file or not\nvar _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),isLoading=_useState10[0],setIsLoading=_useState10[1];// if an error happened during the process\nvar _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),isError=_useState12[0],setIsError=_useState12[1];// used for tracking the % of upload completed\nvar _useState13=useState(null),_useState14=_slicedToArray(_useState13,2),progress=_useState14[0],setProgress=_useState14[1];var clearError=function clearError(){setIsError(null);};var uploadImage=function uploadImage(){setUpload(true);};// this function will be called when the any properties in the dependency array changes\nuseEffect(function(){/**\n     *\n     * @param _value\n     */var setUp=function setUp(_value){if(_value){console.log('[useFirebaseUpload]: input is a file, creating reference put');//@ts-ignore\n//let fName = `${_value.name}`;\n// setting the firebase properties for the file upload\nvar ref=storageRef.child(\"pictures/\"+fileName);//@ts-ignore\nreturn ref.put(_value);}else{var v=_value;//let fName = `${new Date().getTime()}.${v.format}`;\n// setting the firebase properties for the file upload\nvar _ref=storageRef.child(\"images/\"+fileName);return _ref.putString(v.dataUrl,\"data_url\");}};var uploadData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var uploadTask;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// initialize upload information\nsetIsError(false);setIsLoading(true);setProgress({value:0});// handle a file upload or a dataUrl upload\nuploadTask=setUp(fileData);// wrap the whole thing in a try catch block to update the error state\ntry{// tracking the state of the upload to assist in updating the\n// application UI\nuploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED,function(_progress){var value=_progress.bytesTransferred/_progress.totalBytes;console.log(\"[useFirebaseUpload]: Upload is \"+value*100+\"% done\");setProgress({value:value});},function(_error){setIsLoading(false);setIsError(_error);},/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var downloadUrl;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setIsError(false);setIsLoading(false);// need to get the url to download the file\n_context.next=4;return uploadTask.snapshot.ref.getDownloadURL();case 4:downloadUrl=_context.sent;// set the data when upload has completed\nsetDataResponse({metaData:uploadTask.snapshot.metadata,downloadUrl:downloadUrl});// reset progress\nsetProgress(null);case 7:case\"end\":return _context.stop();}}},_callee);})));}catch(_error){setIsLoading(false);setIsError(_error);}case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function uploadData(){return _ref2.apply(this,arguments);};}();//makes sure fileData isn't null before uploading it\nfileData&&upload&&uploadData();setUpload(false);},[upload,fileData,fileName]);return[{dataResponse:dataResponse,isLoading:isLoading,isError:isError,progress:progress},setFileData,clearError,uploadImage,setFileName];}export default FirebaseFileUploadApi;","map":{"version":3,"sources":["/Users/drew/Documents/Development/Morgan_Site/MoShops/src/hooks/useFirebaseUpload.tsx"],"names":["useState","useEffect","firebase","firebaseApp","storageRef","fbApp","storage","ref","FirebaseFileUploadApi","dataResponse","setDataResponse","fileData","setFileData","fileName","setFileName","upload","setUpload","isLoading","setIsLoading","isError","setIsError","progress","setProgress","clearError","uploadImage","setUp","_value","console","log","child","put","v","putString","dataUrl","uploadData","value","uploadTask","on","TaskEvent","STATE_CHANGED","_progress","bytesTransferred","totalBytes","_error","snapshot","getDownloadURL","downloadUrl","metaData","metadata"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport firebase from 'firebase/app';\nimport firebaseApp from '../Firebase';\n\n// defining types...\ntype UploadDataResponse =\n  | { metaData: firebase.storage.FullMetadata; downloadUrl: any }\n  | undefined;\ntype ProgressResponse = { value: number } | undefined | null;\ntype DataAsDataUrl = { dataUrl: string; format: string };\ntype UploadSource = File | DataAsDataUrl | undefined;\n\n// the firebase reference to storage\nconst storageRef = firebaseApp.fbApp.storage().ref();\n\nfunction FirebaseFileUploadApi(): [\n  {\n    dataResponse: UploadDataResponse;\n    isLoading: boolean;\n    isError: any;\n    progress: ProgressResponse;\n  },\n  Function,\n  Function,\n  Function,\n  Function\n] {\n  // the data from the file upload response\n  const [dataResponse, setDataResponse] = useState<UploadDataResponse>();\n\n  // sets properties on the file to be uploaded\n  const [fileData, setFileData] = useState<UploadSource>();\n\n  const [fileName, setFileName] = useState<string>();\n\n  const [upload, setUpload] = useState<boolean>(false);\n\n  // if we are loading a file or not\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  // if an error happened during the process\n  const [isError, setIsError] = useState<any>(false);\n\n  // used for tracking the % of upload completed\n  const [progress, setProgress] = useState<ProgressResponse>(null);\n\n  const clearError = () => {\n    setIsError(null);\n  };\n  const uploadImage = () => {\n    setUpload(true)\n  }\n  // this function will be called when the any properties in the dependency array changes\n  useEffect(() => {\n    /**\n     *\n     * @param _value\n     */\n    const setUp = (_value: UploadSource): firebase.storage.UploadTask => {\n\n      if (_value as File) {\n        console.log('[useFirebaseUpload]: input is a file, creating reference put')\n        //@ts-ignore\n        //let fName = `${_value.name}`;\n        // setting the firebase properties for the file upload\n        let ref = storageRef.child(\"pictures/\" + fileName);\n        //@ts-ignore\n        return ref.put(_value);\n      } else {\n        let v = _value as DataAsDataUrl;\n        //let fName = `${new Date().getTime()}.${v.format}`;\n        // setting the firebase properties for the file upload\n        let ref = storageRef.child(\"images/\" + fileName);\n        return ref.putString(v.dataUrl, \"data_url\");\n      }\n    };\n\n    const uploadData = async () => {\n      // initialize upload information\n      setIsError(false);\n      setIsLoading(true);\n\n      setProgress({ value: 0 });\n\n      // handle a file upload or a dataUrl upload\n      let uploadTask = setUp(fileData);\n\n      // wrap the whole thing in a try catch block to update the error state\n      try {\n        // tracking the state of the upload to assist in updating the\n        // application UI\n        uploadTask.on(\n          firebase.storage.TaskEvent.STATE_CHANGED,\n          _progress => {\n            var value = _progress.bytesTransferred / _progress.totalBytes;\n            console.log(\"[useFirebaseUpload]: Upload is \" + value * 100 + \"% done\");\n            setProgress({ value });\n          },\n          _error => {\n            setIsLoading(false);\n            setIsError(_error);\n          },\n          async () => {\n            setIsError(false);\n            setIsLoading(false);\n\n            // need to get the url to download the file\n            let downloadUrl = await uploadTask.snapshot.ref.getDownloadURL();\n\n            // set the data when upload has completed\n            setDataResponse({\n              metaData: uploadTask.snapshot.metadata,\n              downloadUrl\n            });\n\n            // reset progress\n            setProgress(null);\n          }\n        );\n      } catch (_error) {\n        setIsLoading(false);\n        setIsError(_error);\n      }\n    };\n    //makes sure fileData isn't null before uploading it\n    fileData && upload && uploadData();\n    setUpload(false);\n  }, [upload, fileData, fileName]);\n\n  return [\n    { dataResponse, isLoading, isError, progress },\n    setFileData,\n    clearError,\n    uploadImage,\n    setFileName\n  ];\n}\n\nexport default FirebaseFileUploadApi;"]},"metadata":{},"sourceType":"module"}