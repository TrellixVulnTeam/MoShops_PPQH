[{"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/index.tsx":"1","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/serviceWorker.ts":"2","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/App.tsx":"3","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/Contact.tsx":"4","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/About.tsx":"5","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/Page.tsx":"6","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/CRUD.tsx":"7","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/Portfolio.tsx":"8","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/Commissions.tsx":"9","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/Home.tsx":"10","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/SignIn.tsx":"11","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/Firebase.tsx":"12","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/ExploreContainer.tsx":"13","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcontainer.tsx":"14","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/AboutContainer.tsx":"15","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/ContactContainer.tsx":"16","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CommissionContainer.tsx":"17","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/SignInContainer.tsx":"18","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/PortfolioContainer.tsx":"19","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/HomeContainer.tsx":"20","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/UploadImageCard.tsx":"21","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/ReadEntryCard.tsx":"22","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/DeleteEntryCard.tsx":"23","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/EditEntryCard.tsx":"24","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/CreatePortfolioEntryCard.tsx":"25","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/hooks/useFirebaseUpload.tsx":"26"},{"size":430,"mtime":1618636573323,"results":"27","hashOfConfig":"28"},{"size":5213,"mtime":1618636573324,"results":"29","hashOfConfig":"28"},{"size":2149,"mtime":1618636573321,"results":"30","hashOfConfig":"28"},{"size":612,"mtime":1618895305017,"results":"31","hashOfConfig":"28"},{"size":609,"mtime":1618895301251,"results":"32","hashOfConfig":"28"},{"size":890,"mtime":1618895320534,"results":"33","hashOfConfig":"28"},{"size":609,"mtime":1618895310163,"results":"34","hashOfConfig":"28"},{"size":625,"mtime":1618895328659,"results":"35","hashOfConfig":"28"},{"size":1555,"mtime":1618895296332,"results":"36","hashOfConfig":"28"},{"size":605,"mtime":1618636573323,"results":"37","hashOfConfig":"28"},{"size":612,"mtime":1618895333075,"results":"38","hashOfConfig":"28"},{"size":4150,"mtime":1618636573321,"results":"39","hashOfConfig":"28"},{"size":630,"mtime":1618636573322,"results":"40","hashOfConfig":"28"},{"size":1967,"mtime":1618636573322,"results":"41","hashOfConfig":"28"},{"size":986,"mtime":1618636573321,"results":"42","hashOfConfig":"28"},{"size":334,"mtime":1618638201123,"results":"43","hashOfConfig":"28"},{"size":3099,"mtime":1618897187582,"results":"44","hashOfConfig":"28"},{"size":1340,"mtime":1618636573323,"results":"45","hashOfConfig":"28"},{"size":4844,"mtime":1618636573322,"results":"46","hashOfConfig":"28"},{"size":1374,"mtime":1618638050989,"results":"47","hashOfConfig":"28"},{"size":7037,"mtime":1618636573322,"results":"48","hashOfConfig":"28"},{"size":5707,"mtime":1618636573322,"results":"49","hashOfConfig":"28"},{"size":5699,"mtime":1618636573322,"results":"50","hashOfConfig":"28"},{"size":7427,"mtime":1618636573322,"results":"51","hashOfConfig":"28"},{"size":9119,"mtime":1618636573322,"results":"52","hashOfConfig":"28"},{"size":4142,"mtime":1618636573323,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"fwiou4",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"56"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/index.tsx",[],["120","121"],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/serviceWorker.ts",[],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/App.tsx",[],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/Contact.tsx",[],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/About.tsx",[],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/Page.tsx",[],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/CRUD.tsx",[],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/Portfolio.tsx",["122"],"import { IonContent, IonHeader, IonItem, IonPage, IonTitle, IonToolbar } from '@ionic/react';\nimport React from 'react';\nimport PortfolioContainer from '../components/PortfolioContainer';\nimport './Page.css';\n\n\n\nconst Page: React.FC = () => {\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonItem routerLink = \"/Home\">\n            <IonTitle>Moevil - Portfolio</IonTitle>\n          </IonItem>\n          \n        </IonToolbar>\n      </IonHeader>\n\n      <IonContent fullscreen>\n\n        \n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Page;\n//<PortfolioContainer pageName={'portfolio'}/>","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/Commissions.tsx",["123","124","125","126"],"import { IonContent, IonHeader, IonItem, IonPage, IonTitle, IonToolbar } from '@ionic/react';\nimport React, { useReducer, useEffect } from 'react';\nimport ComissionContainer from '../components/CommissionContainer';\nimport './Page.css';\nimport firebase from '../Firebase';\n\n\nconst reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case 'default':\n      return {\n        ...state,\n        [action.type]: [action.payload]\n      }\n    default:\n      return {\n        ...state,\n        [action.type]: [action.payload]\n      }\n  }\n}\n\nconst Page: React.FC = () => {\n  const [state, dispatch] = useReducer(reducer, {})\n\n  let mything;\n  firebase.fbApp.auth().onAuthStateChanged(function (user) {\n\n    if (user != null) {\n\n\n      //[TODO] make an index signature for user\n      console.log('[Comissions]: auth state changed, hello', user.displayName)\n      mything = user.displayName\n    } else {\n      // No user is signed in.\n      console.log('[Comissions]:auth state changed, no valid user object')\n    }\n  });\n  //@ts-ignore\n  let userName = mything ? mything : \"unknown\"\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonItem routerLink=\"/Home\">\n            <IonTitle>Moevil - Comisssions</IonTitle>\n\n          </IonItem>\n\n        </IonToolbar>\n      </IonHeader>\n\n      <IonContent fullscreen>\n        \n        <ComissionContainer pageName={'commissions'} />\n\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default Page;\n\n//<IonItem>username:{userName}</IonItem>\n//<IonItem>mything:{mything}</IonItem>\n\n\n","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/Home.tsx",[],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/pages/SignIn.tsx",[],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/Firebase.tsx",[],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/ExploreContainer.tsx",[],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcontainer.tsx",["127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149"],"import firebase from 'firebase';\n// import firebase from 'firebase/app';\n// import 'firebase/database';\nimport React, { useReducer, useRef, useEffect, MutableRefObject, useState } from 'react';\nimport { IonList, IonContent, IonItem, IonInput, IonItemDivider, IonButton, IonLabel, IonProgressBar, IonImg, IonSelect, IonSelectOption, IonCard, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCardContent } from '@ionic/react';\nimport CreateGroupEntryCard from './CRUDcards/CreateGroupEntryCard';\nimport CreatePictureEntryCard from './CRUDcards/CreatePictureEntryCard';\nimport CreatePortfolioEntryCard from './CRUDcards/CreatePortfolioEntryCard';\nimport ReadEntryCard from \"./CRUDcards/ReadEntryCard\";\nimport EditEntryCard from \"./CRUDcards/EditEntryCard\";\nimport DeleteEntryCard from \"./CRUDcards/DeleteEntryCard\";\nimport UploadImageCard from './CRUDcards/UploadImageCard';\n\n\ninterface ContainerProps {\n    pageName: string;\n}\n\n\nconst reducer = (state: any, action: any) => {\n    switch (action.type) {\n        case 'default':\n            return {\n                ...state,\n                [action.type]: [action.payload]\n            }\n        default:\n            return {\n                ...state,\n                [action.type]: [action.payload]\n            }\n    }\n}\n\n// Get a reference to the database service\nconst CRUDcontainer: React.FC<ContainerProps> = ({ pageName }) => {\n       \n    const storageRef = firebase.storage().ref();\n    var listRef = storageRef.child('pictures');\n\n    // Find all the prefixes and items.\n\n    \n    return (\n        <IonContent>\n            <IonItem>Page - {pageName}</IonItem>\n            <UploadImageCard pageName=\"test\"/>\n            <CreatePortfolioEntryCard name=\"test\"/>\n            \n            <ReadEntryCard name=\"Read entry card\"/>\n            <EditEntryCard name=\"Edit entry card\" />\n            <DeleteEntryCard name=\"Delete entry card\" />\n            \n        </IonContent>\n    );\n};\n\nexport default CRUDcontainer;\n\n\n","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/AboutContainer.tsx",["150"],"import firebase from 'firebase';\nimport React from 'react';\nimport { IonContent, IonCard, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCardContent } from '@ionic/react';\n\n\ninterface ContainerProps {\n  pageName: string;\n}\n\n\n// Get a reference to the database service\nconst AboutContainer: React.FC<ContainerProps> = ({ pageName }) => {\n    \n    return (\n\n      <IonContent>\n         <IonCard>\n          <IonCardHeader>\n            <IonCardSubtitle>A brief bio</IonCardSubtitle>\n            <IonCardTitle>{pageName}</IonCardTitle>\n          </IonCardHeader>\n\n          <IonCardContent>\n          Hi my name is Mo. I’m a sculpture/illustration artist residing in Seattle WA.\n\n          Shipments are made within 3-5 business days.\n\n          Please feel free to email me if you have any questions regarding returns, commissions/special orders, or other inquiries thank you!!\n      </IonCardContent>\n        </IonCard>\n      </IonContent>\n\n    );\n};\n\nexport default AboutContainer;\n\n\n","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/ContactContainer.tsx",[],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CommissionContainer.tsx",["151","152","153"],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/SignInContainer.tsx",["154","155","156","157"],"//import firebase from 'firebase';\n\nimport 'firebaseui/dist/firebaseui.css';\nimport React, {useEffect} from 'react';\nimport { IonContent, IonCard, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCardContent, IonItem, IonButton } from '@ionic/react';\nimport firebase from '../Firebase'\n\n\n\ninterface ContainerProps {\n  pageName: string;\n}\n//136503459016-om5piob4ocm0et7ijtgar26m1k4fvpo6.apps.googleusercontent.com\n//Kvur_GLTWNQswe_FpnF-HSUg\n//const project = firebase.fbApp\nconst {ui, uiConfig} = firebase\n\nconst logoutHandler = (e:any) => {\n  e.preventDefault()\n  firebase.fbApp.auth().signOut().then(function() {\n    console.log(\"you  signed out\")\n  }).catch(function(error) {\n    console.log(\"logout failed\")\n    console.log(error)\n  })\n}\n// Get a reference to the database service\nconst SignInContainer: React.FC<ContainerProps> = ({ pageName }) => {\n\n    useEffect(() => {\n        ui.start('#firebaseui-auth-container', uiConfig)\n    },[])\n    return (\n\n      <IonContent>\n         <IonCard>\n\n\n          <IonCardContent>\n          {<div>\n                <div id=\"firebaseui-auth-container\"></div>\n\n            </div>}\n      </IonCardContent>\n        </IonCard>\n        <IonCard>\n          <IonButton onClick={(e)=>logoutHandler(e)}>Logout</IonButton>\n\n        </IonCard>\n      </IonContent>\n\n    );\n};\n\nexport default SignInContainer;\n\n","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/PortfolioContainer.tsx",["158","159","160","161","162","163","164","165","166","167","168"],"import React, { useReducer, useEffect, useState, ReactChild } from 'react';\nimport firebase from '../Firebase'\nimport { IonItem, IonImg, IonCol, IonRow, IonGrid } from '@ionic/react';\n\n\ninterface ContainerProps {\n  pageName: string;\n}\n\ninterface PortfolioItem {\n  imgUrl: string;\n  width: number;\n  height: number;\n  date: string;\n}\n\nconst reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case 'spread':\n      return {\n        ...action.payload\n      }\n    case 'dbReplace':\n      return {\n        ...action.payload\n      }\n    default:\n      return {\n        ...state,\n        [action.type]: action.payload\n      }\n  }\n}\n\nconst PortfolioContainer: React.FC<ContainerProps> = ({ pageName }) => {\n  const [allStorageImgs, updateAllStorageImgs] = useReducer(reducer, {})\n  const [allPortfolioEntries, updateAllPortfolioEntries] = useReducer(reducer, {})\n  const [allDbImages, updateDbImages] = useReducer(reducer, {})\n  const [localImgs, updateLocalImgs] = useReducer(reducer, {})\n  const [err, updateErr] = useState<string>();\n  const [portfolioItems, updatePortfolioItems] = useReducer(reducer, {})\n  const storageRef = firebase.fbApp.storage().ref();\n  const database = firebase.fbApp.database()\n  var listRef = storageRef.child('pictures');\n  useEffect(() => {\n    console.log(`[useEffect] entering use effect`)\n    listRef.listAll().then(function (res) {\n      res.items.forEach(function (itemRef) {\n        itemRef.getDownloadURL().then(function (url) {\n          updateAllStorageImgs({\n            type: itemRef.name,\n            //@ts-ignore\n            payload: {\n              imageUrl: url,\n              imageName: itemRef.name,\n              imageFullPath: itemRef.fullPath\n            }\n          });\n        })\n      });\n    }).catch(function (error) {\n      console.log('error getting pictures references')\n      updateErr('error getting pictures references')\n    });\n    database.ref('images/').once('value').then(function (snapshot) {\n      updateDbImages({\n        type: \"dbReplace\",\n        payload: snapshot.val()\n      });\n    })\n    database.ref('portfolio/').once('value').then(function (snapshot) {\n      //console.log('[imagesDb] snapshot val;')\n      //console.log(snapshot.val())\n      updateAllPortfolioEntries({\n        type: \"dbReplace\",\n        payload: snapshot.val()\n      });\n    });\n    //console.log('[PortfolioContainer]: all entries:', allPortfolioEntries)\n    console.log(`[useEffect] all portfolio entries`, allPortfolioEntries)\n    \n  }, []);\n  //Trying to create the portfolio matrix to transpose on teh responsive grid. Only need to update on completion of updateAllPortfolioEntreies\n  useEffect(()=> {\n    const allPortfolioItems = Object.entries(allPortfolioEntries).map((key, value) => {\n      //@ts-ignore\n      let { itemName, creationDate, itemDescription, imgArr } = key[1]\n\n      if (allStorageImgs[allDbImages[imgArr[0]].imageName]) {\n        const imgUrl = allStorageImgs[allDbImages[imgArr[0]].imageName].imageUrl;\n        const width = allStorageImgs[allDbImages[imgArr[0]].imageName].imageWidth;\n        const height = allStorageImgs[allDbImages[imgArr[0]].imageName].imageHeight;\n        const date = allDbImages[imgArr[0]].creationDate;\n        const newItem: PortfolioItem = {\n          imgUrl: imgUrl,\n          width: width,\n          height: height,\n          date: date\n        }\n        return newItem\n      }\n    })\n    console.log(`[useEffect2] all portfolio items`, allPortfolioItems)\n    updatePortfolioItems({\n      type: 'myArr',\n      payload: allPortfolioItems\n    })\n    buildPortfolioMatrix()\n  }, [allPortfolioEntries])\n  let colWidth = 0;\n  const maxWidth = 1000\n  const buildPortfolioMatrix = () => {\n    //start with row\n    //add image column\n    //add dimensions to colWidth\n    //if max width break\n    //end with row\n    let sortedArr = portfolioItems.myArr || []\n    for (const item of sortedArr){\n      console.log(`[buildMatrix]: item width ${item.width}`)\n    }\n  }\n  \n  const gridItems = () => {\n    //@ts-ignore\n    let returnArr: [ReactChild] = [<IonItem></IonItem>];\n    //console.log(portfolioItems)\n    if (portfolioItems.myArr) {\n      for (const item of portfolioItems.myArr) {\n        if (item && item.imgUrl!=undefined) {\n          //console.log('entering thing')\n          if (colWidth == 0) {\n            //console.log(`[gridItems] creating item`)\n            returnArr.push(<IonRow>\n              <IonCol size='3' >\n                <IonItem>\n                  <IonImg src={item.imgUrl} />\n                </IonItem>\n              </IonCol>\n            </IonRow>)\n          }\n          \n        }\n      }\n      return returnArr\n    }\n  }\n\n  return (\n    <IonGrid>\n  \n        {gridItems()}\n      \n      <IonRow><IonItem>Error Code: {err?err:'none'}</IonItem></IonRow>\n    </IonGrid>\n  );\n};\n\nexport default PortfolioContainer;\n",["169","170"],"/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/HomeContainer.tsx",["171","172","173"],"import React from 'react';\nimport { IonContent, IonList, IonLabel, IonItem, IonCardContent, IonCard } from '@ionic/react';\nimport './centerContent.css';\nimport firebase from '../Firebase';\nconst HomeContainer: React.FC = () => {\nlet name;\n    if(firebase){\n        name = firebase.name\n    } else {\n        name = 'fdsagdfsga'\n    }\n\n  return (\n    <IonContent >\n        <IonItem routerLink = \"/Signin\" lines='full'>\n                <IonLabel class=\"center-content\" color=\"primary\">Morgan Richards</IonLabel>\n            </IonItem>\n        {/*-- List of Text Items --*/}\n\n        <IonList >\n            \n            <IonItem  routerLink = \"/About\" lines=\"none\">\n                <IonLabel class=\"center-content\" color=\"secondary\">About</IonLabel>\n            </IonItem>\n            <IonItem routerLink = \"/Portfolio\" lines=\"none\">\n                <IonLabel class=\"center-content\" color=\"secondary\">Portfolio</IonLabel>\n            </IonItem>\n            <IonItem  routerLink = \"/Commissions\" lines=\"none\">\n                <IonLabel class=\"center-content\" color=\"secondary\">Comissions</IonLabel>\n            </IonItem>\n            <IonItem routerLink = \"/Contact\" lines=\"none\">\n                <IonLabel class=\"center-content\" color=\"secondary\">Contact</IonLabel>\n            </IonItem>\n            \n        </IonList>\n\n    </IonContent>\n  );\n};\n\nexport default HomeContainer;","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/UploadImageCard.tsx",["174","175","176","177","178","179","180","181"],"\n// import firebase from 'firebase/app';\n// import 'firebase/database';\nimport React, { useReducer, useRef, MutableRefObject, useState } from 'react';\nimport { IonItem, IonInput, IonButton, IonLabel, IonProgressBar, IonImg, IonCard, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCardContent, IonToast } from '@ionic/react';\nimport useFirebaseUpload from \"../../hooks/useFirebaseUpload\";\nimport firebase from '../../Firebase';\n\n\n\ninterface ContainerProps {\n    pageName: string;\n}\n\ninterface ImageItem {\n    imageName: String\n    imageFullPath: String\n    imageDescription: String\n    imageUrl: String\n\n}\n\n\nconst imageStateInitial: ImageItem = {\n    imageName: \"\",\n    imageFullPath: \"\",\n    imageDescription: \"test\",\n    imageUrl: \"\"\n}\n\nconst reducer = (state: any, action: any) => {\n    switch (action.type) {\n        case 'spread':\n            return {\n                ...action.payload\n            }\n        case 'dbReplace':\n            return {\n                ...action.payload\n            }\n        default:\n            return {\n                ...state,\n                [action.type]: action.payload\n            }\n    }\n}\n\nconst UploadImageCard: React.FC<ContainerProps> = ({ pageName }) => {\n    const [\n        { dataResponse, isLoading, isError, progress },\n        setFileData,\n        clearError,\n        uploadImage,\n        setFileName\n    ] = useFirebaseUpload();\n    const [imageState, imageDispatch] = useReducer(reducer, imageStateInitial)\n    const [imgName, setImgName] = useState<string>();\n    const [imgDescription, setImgDescription] = useState<string>();\n    const [imgPreview, setImgPreview] = useState<string>('');\n    const [showToastSuccess, setToastSuccess] = useState(false);\n    const [showToastError, setToastError] = useState(false);\n    const [errorToastText, setErrorToastText] = useState('');    \n    const database = firebase.fbApp.database()\n    const onSubmitHandler = (event: any) => {\n        setFileName(imgName);\n        const img = new Image();\n        img.src = imgPreview\n        if(img.height!=0 && img.width!=0){\n            uploadImage();\n            pushNewImageEntry(img);\n        } else {\n                setToastError(true)\n                setErrorToastText('Please pick a picture first')\n                \n            }\n        \n    }\n    const onSelectFile = (event: any, inputRef: MutableRefObject<null>) => {\n        //@ts-ignore\n        const image = inputRef.current.files[0]\n        console.log(image)\n\n        if (inputRef != null && image instanceof File) {\n            console.log('[onSelectFile]: inputref is a file')\n            //@ts-ignore\n            const imgBlob = URL.createObjectURL(image)\n            setFileData(image);\n            setImgPreview(imgBlob);\n            setImgName(image.name);\n            setImgDescription(`An image of ${image.name}`)\n        } else {\n            console.log('[onSelectFile]: inputref is not a file, no file found')\n        }\n    }\n    const onNameChangeHandler = (event:any) => {\n        console.log(`updating name`);\n        setImgName(event.detail.value)\n    }\n    const onDescChangeHandler = (event:any) => {\n        console.log(`updating desc`);\n        setImgDescription(event.detail.value)\n    }\n    const pushNewImageEntry = (img:HTMLImageElement) => {\n       \n            img.src = imgPreview || ''\n            database.ref('images/').push({\n                imageDescription: imgDescription,\n                imageName: imgName,\n                imageFullPath: `pictures/${imgName}`,\n                imageWidth: img.width,\n                imageHeight: img.height\n            }, function (error) {\n                if (error) {\n                    console.log('[pushNewImageEntry] Upload Failed')\n                    console.log(error)\n                    console.log(error.name)\n                    console.log(error.message)\n                    setToastError(true)\n                    setErrorToastText(error.message)\n                } else {\n                    console.log('[pushNewImageEntry] created entry successfully')\n                    setToastSuccess(true)\n                    setErrorToastText('success!!!')\n                }\n            })\n        } \n    const fileRef = useRef(null)\n    return (\n        <IonCard>\n            <IonCardHeader>\n                <IonCardTitle>Upload</IonCardTitle>\n                <IonCardSubtitle>Select an image to upload</IonCardSubtitle>\n            </IonCardHeader>\n            <IonCardContent>\n                <IonItem>\n                    <IonImg src={imgPreview} />\n                </IonItem>\n                <IonItem>\n                    <input ref={fileRef} hidden type=\"file\" accept=\"image/*\" onChange={(e) => onSelectFile(e, fileRef)} onClick={() => { console.log('opening file selector') }} />\n                    <IonButton color=\"primary\"\n                        onClick={\n                            () => {\n                                //@ts-ignore\n                                fileRef?.current?.click();\n                            }\n                    }>\n                    Select Image\n                    </IonButton>\n                </IonItem>\n                <IonItem>\n                    <IonLabel>Image Name: </IonLabel>\n                    <IonInput value={imgName} onIonChange={onNameChangeHandler}></IonInput>\n                </IonItem>\n                <IonItem>\n                    <IonLabel>Image Description: </IonLabel>\n                    <IonInput value={imgDescription} onIonChange={onDescChangeHandler}></IonInput>\n                </IonItem>\n                <IonItem>\n                    <IonButton\n                        color=\"seccondary\" onClick={onSubmitHandler}>\n                        Submit\n                        </IonButton>\n                    {/* get loading information from hook and display progress if necessary */}\n                    {isLoading && progress && (\n                        <IonProgressBar value={progress.value}></IonProgressBar>\n                    )}\n                </IonItem>\n                //@ts-ignore\n                <IonToast\n                    isOpen={showToastSuccess}\n                    onDidDismiss={() => setToastSuccess(false)}\n                    message=\"Success!\"\n                    duration={1200}\n                />\n                 <IonToast\n                    isOpen={showToastError}\n                    onDidDismiss={() => setToastError(false)}\n                    message={errorToastText}\n                    position=\"top\"\n                    duration={1200}\n                    buttons={[\n                    \n                    {\n                        //@ts-ignore\n                        text: 'Done',\n                        role: 'cancel',\n                        handler: () => {\n                        console.log('Cancel clicked');\n                        setErrorToastText('none')\n                        }\n                    }\n                    ]}\n                />\n            </IonCardContent>\n        </IonCard>\n    )\n}\nexport default UploadImageCard;","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/ReadEntryCard.tsx",["182","183","184","185","186"],"import React, { useReducer, useState } from 'react';\n\nimport { IonContent, IonCard, IonCardHeader, IonCardTitle, IonCardSubtitle, IonCardContent, IonList, IonItemDivider, IonItem, IonInput, IonLabel, IonSelect, IonImg, IonSelectOption } from '@ionic/react';\n\ninterface ContainerProps {\n  name: string;\n}\ninterface PortfolioItem {\n    itemName: String\n    itemDescription: String\n    imgLocation: String\n  };\nconst initialState: PortfolioItem = {\n  itemName: 'default name',\n  itemDescription: 'default description',\n  imgLocation: \"default location\"\n};\nconst reducer = (state: any, action: any) => {\n    switch (action.type) {\n      case 'default':\n        return {\n          ...state,\n          [action.type]: [action.payload]\n        }\n      default:\n        return {\n          ...state,\n          [action.type]: [action.payload]\n        }\n    }\n}\nconst ReadEntryCard: React.FC<ContainerProps> = ({ name }) => {\n    //blueprint for database entries for reference\n    const dbSettings = {\n        \"Pictures\": {\n            \"imageKey\" : {\n                \"imageLocation\" : \"location on google firebased\",\n                \"name\" : \"Name of the image\"\n            }\n        },\n        \"Picture Groups\": {\n            \"groupKey\" : {\n                \"imageKey\" : true\n            }\n        },\n        \"Portfolio\" : {\n            \"itemKey\" : {\n                \"name\" : \"item name\",\n                \"description\" : \"item description\",\n                \"creationDate\" : \"date item was created\",\n                \"refToPictures\" : \"reference to Pictures db entry\",\n                \"refToPictureGroups\" : \"reference to Picture Groups db entry\"\n            }\n        },\n        \"Inventory\" : {\n            \"itemKey\" : {\n                \"name\" : \"item name\",\n                \"description\" : \"item description\",\n                \"refToPictures\" : \"reference to Pictures db entry\",\n                \"refToPictureGroups\" : \"reference to Picture Groups db entry\",\n                \"price\" : \"price of the item in $\"\n            }\n        }\n    }\n    //declaring multiple state variables\n    const [state, dispatch] = useReducer(reducer, initialState)\n    const [allImgs, updateImgs] = useReducer(reducer, {})\n    const [selectedImg, updateSelectedImg] = useState<string>()\n    const [selectedGroup, updateSelectedGroup] = useState<string>()\n    const imageOptions = Object.entries(allImgs).map((key, value) => {\n        //console.log(`key: ${key}`)\n        //@ts-ignore\n        //console.log(key[1][0])\n        //@ts-ignore\n        return <IonSelectOption value={key[1][0]}>{key[0]}</IonSelectOption>\n      })\n    const portfolioOptions = Object.entries(dbSettings[\"Portfolio\"][\"itemKey\"]).map((key, value) => {\n        return (\n            <IonItem>\n                <IonItemDivider>\n                    {key[0]}{key[1]}{value}\n                </IonItemDivider>\n                <IonItem>\n                    <IonInput value={value} name={key[0]} placeholder=\"...\" onIonChange={e => onChangeHandler(e!)}></IonInput>\n                </IonItem> \n            </IonItem>\n        )\n    })\n    const onChangeHandler = (e: any) => {\n        dispatch({\n          type: e.target.name,\n          payload: e.detail.value\n        })\n    }\n    const onSelectDropdownImg = (e: any) => {\n        console.log(\"[onSelectDropdownImg]\")\n        console.log(e)\n        updateImgs(\"changed\")\n    }\n    const onSelectDropdownGroup = (e: any) => {\n        console.log(\"[onSelectDropdownGroup]\")\n        console.log(e)\n        updateImgs(\"changed\")\n    }       \n  return (\n\n       <IonCard>\n        <IonCardHeader>\n          <IonCardTitle>Read Entry</IonCardTitle>\n          <IonCardSubtitle>cleanup inner function code</IonCardSubtitle>\n        </IonCardHeader>\n        <IonCardContent>\n            <IonItem>\n                <IonList>\n                    <IonItemDivider>\n                        Name:\n                    </IonItemDivider>\n                    <IonItem>\n                        <IonInput value=\"\" name='name' placeholder=\"...\"></IonInput>\n                    </IonItem>\n                    <IonItemDivider>\n                        Description:</IonItemDivider>\n                    <IonItem>\n                        <IonInput value=\"\" name='description' placeholder=\"...\"></IonInput>\n                    </IonItem>\n                    <IonItemDivider>\n                        Creation Date: \n                    </IonItemDivider>\n                    <IonItem>\n                        <IonInput value=\"\" name='creationDate' placeholder=\"...\"></IonInput>\n                    </IonItem>\n                    <IonItemDivider>\n                        Ref to Pictures: \n                    </IonItemDivider>\n                    <IonItem>\n                        <IonLabel>Pick the image</IonLabel>\n                        <IonSelect value={selectedImg} okText=\"Okay\" cancelText=\"Dismiss\" onIonChange={e => onSelectDropdownImg(e)}>\n                        {imageOptions}\n                        </IonSelect>\n                    </IonItem>\n                    <IonItem>\n                        <IonImg src={selectedImg} />\n                    </IonItem>\n                    <IonItemDivider>\n                        Ref to Picture Group: \n                    </IonItemDivider>\n                    <IonItem>\n                        <IonLabel>Pick the group</IonLabel>\n                        <IonSelect value={selectedGroup} okText=\"Okay\" cancelText=\"Dismiss\" onIonChange={e => onSelectDropdownGroup(e)}>\n                        {imageOptions}\n                        </IonSelect>\n                    </IonItem>\n                </IonList>\n            </IonItem>\n        </IonCardContent>\n        </IonCard>\n\n  );\n};\n\nexport default ReadEntryCard;\n","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/DeleteEntryCard.tsx",["187","188","189","190","191"],"import React, { useReducer, useState } from 'react';\n\nimport { IonContent, IonCard, IonCardHeader, IonCardTitle, IonCardSubtitle, IonCardContent, IonList, IonItemDivider, IonItem, IonInput, IonLabel, IonSelect, IonImg, IonSelectOption } from '@ionic/react';\n\ninterface ContainerProps {\n  name: string;\n}\ninterface PortfolioItem {\n    itemName: String\n    itemDescription: String\n    imgLocation: String\n  };\nconst initialState: PortfolioItem = {\n  itemName: 'default name',\n  itemDescription: 'default description',\n  imgLocation: \"default location\"\n};\nconst reducer = (state: any, action: any) => {\n    switch (action.type) {\n      case 'default':\n        return {\n          ...state,\n          [action.type]: [action.payload]\n        }\n      default:\n        return {\n          ...state,\n          [action.type]: [action.payload]\n        }\n    }\n}\nconst DeleteEntryCard: React.FC<ContainerProps> = ({ name }) => {\n    //blueprint for database entries for reference\n    const dbSettings = {\n        \"Pictures\": {\n            \"imageKey\" : {\n                \"imageLocation\" : \"location on google firebased\",\n                \"name\" : \"Name of the image\"\n            }\n        },\n        \"Picture Groups\": {\n            \"groupKey\" : {\n                \"imageKey\" : true\n            }\n        },\n        \"Portfolio\" : {\n            \"itemKey\" : {\n                \"name\" : \"item name\",\n                \"description\" : \"item description\",\n                \"creationDate\" : \"date item was created\",\n                \"refToPictures\" : \"reference to Pictures db entry\",\n                \"refToPictureGroups\" : \"reference to Picture Groups db entry\"\n            }\n        },\n        \"Inventory\" : {\n            \"itemKey\" : {\n                \"name\" : \"item name\",\n                \"description\" : \"item description\",\n                \"refToPictures\" : \"reference to Pictures db entry\",\n                \"refToPictureGroups\" : \"reference to Picture Groups db entry\",\n                \"price\" : \"price of the item in $\"\n            }\n        }\n    }\n    //declaring multiple state variables\n    const [state, dispatch] = useReducer(reducer, initialState)\n    const [allImgs, updateImgs] = useReducer(reducer, {})\n    const [selectedImg, updateSelectedImg] = useState<string>()\n    const [selectedGroup, updateSelectedGroup] = useState<string>()\n    const imageOptions = Object.entries(allImgs).map((key, value) => {\n        //console.log(`key: ${key}`)\n        //@ts-ignore\n        //console.log(key[1][0])\n        //@ts-ignore\n        return <IonSelectOption value={key[1][0]}>{key[0]}</IonSelectOption>\n      })\n    const portfolioOptions = Object.entries(dbSettings[\"Portfolio\"][\"itemKey\"]).map((key, value) => {\n        return (\n            <IonItem>\n                <IonItemDivider>\n                    {key[0]}{key[1]}{value}\n                </IonItemDivider>\n                <IonItem>\n                    <IonInput value={value} name={key[0]} placeholder=\"...\" onIonChange={e => onChangeHandler(e!)}></IonInput>\n                </IonItem> \n            </IonItem>\n        )\n    })\n    const onChangeHandler = (e: any) => {\n        dispatch({\n          type: e.target.name,\n          payload: e.detail.value\n        })\n    }\n    const onSelectDropdownImg = (e: any) => {\n        console.log(\"[onSelectDropdownImg]\")\n        console.log(e)\n        updateImgs(\"changed\")\n    }\n    const onSelectDropdownGroup = (e: any) => {\n        console.log(\"[onSelectDropdownGroup]\")\n        console.log(e)\n        updateImgs(\"changed\")\n    }       \n  return (\n\n       <IonCard>\n        <IonCardHeader>\n          <IonCardTitle>Delete Entry</IonCardTitle>\n          <IonCardSubtitle>for Portfolio</IonCardSubtitle>\n        </IonCardHeader>\n        <IonCardContent>\n            <IonItem>\n                <IonList>\n                    <IonItemDivider>\n                        Name:\n                    </IonItemDivider>\n                    <IonItem>\n                        <IonInput value=\"\" name='name' placeholder=\"...\"></IonInput>\n                    </IonItem>\n                    <IonItemDivider>\n                        Description:</IonItemDivider>\n                    <IonItem>\n                        <IonInput value=\"\" name='description' placeholder=\"...\"></IonInput>\n                    </IonItem>\n                    <IonItemDivider>\n                        Creation Date: \n                    </IonItemDivider>\n                    <IonItem>\n                        <IonInput value=\"\" name='creationDate' placeholder=\"...\"></IonInput>\n                    </IonItem>\n                    <IonItemDivider>\n                        Ref to Pictures: \n                    </IonItemDivider>\n                    <IonItem>\n                        <IonLabel>Pick the image</IonLabel>\n                        <IonSelect value={selectedImg} okText=\"Okay\" cancelText=\"Dismiss\" onIonChange={e => onSelectDropdownImg(e)}>\n                        {imageOptions}\n                        </IonSelect>\n                    </IonItem>\n                    <IonItem>\n                        <IonImg src={selectedImg} />\n                    </IonItem>\n                    <IonItemDivider>\n                        Ref to Picture Group: \n                    </IonItemDivider>\n                    <IonItem>\n                        <IonLabel>Pick the group</IonLabel>\n                        <IonSelect value={selectedGroup} okText=\"Okay\" cancelText=\"Dismiss\" onIonChange={e => onSelectDropdownGroup(e)}>\n                        {imageOptions}\n                        </IonSelect>\n                    </IonItem>\n                </IonList>\n            </IonItem>\n        </IonCardContent>\n        </IonCard>\n\n  );\n};\n\nexport default DeleteEntryCard;\n","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/EditEntryCard.tsx",["192","193","194","195"],"import React, { useReducer, useState } from 'react';\n\nimport { IonContent, IonCard, IonCardHeader, IonCardTitle, IonCardSubtitle, IonCardContent, IonList, IonItemDivider, IonItem, IonInput, IonLabel, IonSelect, IonImg, IonSelectOption } from '@ionic/react';\n\ninterface ContainerProps {\n  name: string;\n}\ninterface PortfolioItem {\n    itemName: String\n    itemDescription: String\n    imgLocation: String\n  };\nconst initialState: PortfolioItem = {\n  itemName: 'default name',\n  itemDescription: 'default description',\n  imgLocation: \"default location\"\n};\nconst reducer = (state: any, action: any) => {\n    switch (action.type) {\n      case 'default':\n        return {\n          ...state,\n          [action.type]: [action.payload]\n        }\n      default:\n        return {\n          ...state,\n          [action.type]: [action.payload]\n        }\n    }\n}\nconst EditEntryCard: React.FC<ContainerProps> = ({ name }) => {\n    //blueprint for database entries for reference\n    const dbSettings = {\n        \"Pictures\": {\n            \"imageKey\" : {\n                \"imageLocation\" : \"location on google firebased\",\n                \"name\" : \"Name of the image\"\n            }\n        },\n        \"Picture Groups\": {\n            \"groupKey\" : {\n                \"imageKey\" : true\n            }\n        },\n        \"Portfolio\" : {\n            \"itemKey\" : {\n                \"name\" : \"item name\",\n                \"description\" : \"item description\",\n                \"creationDate\" : \"date item was created\",\n                \"refToPictures\" : \"reference to Pictures db entry\",\n                \"refToPictureGroups\" : \"reference to Picture Groups db entry\"\n            }\n        },\n        \"Inventory\" : {\n            \"itemKey\" : {\n                \"name\" : \"item name\",\n                \"description\" : \"item description\",\n                \"refToPictures\" : \"reference to Pictures db entry\",\n                \"refToPictureGroups\" : \"reference to Picture Groups db entry\",\n                \"price\" : \"price of the item in $\"\n            }\n        }\n    }\n    //declaring multiple state variables\n    const [state, dispatch] = useReducer(reducer, initialState)\n    const [allImgs, updateImgs] = useReducer(reducer, {})\n    const [selectedImg, updateSelectedImg] = useState<string>()\n    const [selectedGroup, updateSelectedGroup] = useState<string>()\n    const imageOptions = Object.entries(allImgs).map((key, value) => {\n        //console.log(`key: ${key}`)\n        //@ts-ignore\n        //console.log(key[1][0])\n        //@ts-ignore\n        return <IonSelectOption value={key[1][0]}>{key[0]}</IonSelectOption>\n      })\n    const portfolioOptions = Object.entries(dbSettings[\"Portfolio\"][\"itemKey\"]).map((key, value) => {\n        return (\n            <IonItem>\n                <IonItemDivider>\n                    {key[0]}{key[1]}{value}\n                </IonItemDivider>\n                <IonItem>\n                    <IonInput value={value} name={key[0]} placeholder=\"...\" onIonChange={e => onChangeHandler(e!)}></IonInput>\n                </IonItem> \n            </IonItem>\n        )\n    })\n    const onChangeHandler = (e: any) => {\n        dispatch({\n          type: e.target.name,\n          payload: e.detail.value\n        })\n    }\n    const onSelectDropdownImg = (e: any) => {\n        console.log(\"[onSelectDropdownImg]\")\n        console.log(e)\n        updateImgs(\"changed\")\n    }\n    const onSelectDropdownGroup = (e: any) => {\n        console.log(\"[onSelectDropdownGroup]\")\n        console.log(e)\n        updateImgs(\"changed\")\n    }       \n  return (\n<IonItem>\n<IonCard>\n                <IonCardHeader>\n                    <IonCardTitle>Assign</IonCardTitle>\n                    <IonCardSubtitle>Assign the image to portfolio or product entry</IonCardSubtitle>\n                </IonCardHeader>\n                <IonCardContent>\n                    <IonList>\n                        <IonItemDivider>Image Name: {state.itemName}</IonItemDivider>\n                        <IonItem>\n                            <IonInput value={state.itemName} name='itemName' placeholder={state.itemName} onIonChange={e => onChangeHandler(e!)}></IonInput>\n                        </IonItem>\n                        <IonItemDivider>Image Description: {state.itemDescription}</IonItemDivider>\n                        <IonItem>\n                            <IonInput value={state.itemDescription} name='itemDescription' placeholder={state.itemDescription} onIonChange={e => onChangeHandler(e!)}></IonInput>\n                        </IonItem>\n                        <IonItemDivider>File Location:\n                            <IonInput value={state.imgLocation.name}></IonInput>\n                        </IonItemDivider>\n\n                        <IonItem>\n                            <IonLabel>Pick the image</IonLabel>\n                            <IonSelect value={selectedImg} okText=\"Okay\" cancelText=\"Dismiss\" onIonChange={e => onSelectDropdownImg(e)}>\n                                {imageOptions}\n                            </IonSelect>\n                        </IonItem>\n                        <IonItem>\n                            <IonImg src={selectedImg} />\n                        </IonItem>\n                    </IonList>\n                </IonCardContent>\n            </IonCard>\n\n       <IonCard>\n        <IonCardHeader>\n          <IonCardTitle>Edit Entry</IonCardTitle>\n          <IonCardSubtitle>for Portfolio</IonCardSubtitle>\n        </IonCardHeader>\n        <IonCardContent>\n            <IonItem>\n                <IonList>\n                    <IonItemDivider>\n                        Name:\n                    </IonItemDivider>\n                    <IonItem>\n                        <IonInput value=\"\" name='name' placeholder=\"...\"></IonInput>\n                    </IonItem>\n                    <IonItemDivider>\n                        Description:</IonItemDivider>\n                    <IonItem>\n                        <IonInput value=\"\" name='description' placeholder=\"...\"></IonInput>\n                    </IonItem>\n                    <IonItemDivider>\n                        Creation Date: \n                    </IonItemDivider>\n                    <IonItem>\n                        <IonInput value=\"\" name='creationDate' placeholder=\"...\"></IonInput>\n                    </IonItem>\n                    <IonItemDivider>\n                        Ref to Pictures: \n                    </IonItemDivider>\n                    <IonItem>\n                        <IonLabel>Pick the image</IonLabel>\n                        <IonSelect value={selectedImg} okText=\"Okay\" cancelText=\"Dismiss\" onIonChange={e => onSelectDropdownImg(e)}>\n                        {imageOptions}\n                        </IonSelect>\n                    </IonItem>\n                    <IonItem>\n                        <IonImg src={selectedImg} />\n                    </IonItem>\n                    <IonItemDivider>\n                        Ref to Picture Group: \n                    </IonItemDivider>\n                    <IonItem>\n                        <IonLabel>Pick the group</IonLabel>\n                        <IonSelect value={selectedGroup} okText=\"Okay\" cancelText=\"Dismiss\" onIonChange={e => onSelectDropdownGroup(e)}>\n                        {imageOptions}\n                        </IonSelect>\n                    </IonItem>\n                </IonList>\n            </IonItem>\n        </IonCardContent>\n        </IonCard>\n        </IonItem>\n  );\n};\n\nexport default EditEntryCard;\n","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/components/CRUDcards/CreatePortfolioEntryCard.tsx",["196","197","198","199","200","201","202","203","204","205","206","207","208"],"import React, { useReducer, useState, useEffect } from 'react';\n\nimport { IonContent, IonCard, IonCardHeader, IonCardTitle, IonCardSubtitle, IonCardContent, IonList, IonItemDivider, IonItem, IonInput, IonLabel, IonSelect, IonImg, IonSelectOption, IonButton, IonGrid, IonRow, IonCol, IonIcon } from '@ionic/react';\nimport firebase from '../../Firebase';\n\ninterface ContainerProps {\n    name: string;\n}\ninterface PortfolioItem {\n    itemName: String\n    itemDescription: String\n    imgLocation: String\n    groupLocation: String\n    creationDate: String\n};\ninterface StoreItem {\n    itemName: String\n    itemDescription: String\n    imgLocation: String\n    groupLocation: String\n    price: String\n};\ninterface ImageItem {\n    imageName: String\n    imageFullPath: String\n    imageDescription: String\n    imageUrl: String\n\n}\ninterface PictureGroup {\n    //might need to be array of strings\n    imageId: String\n};\nconst imageStateInitial: ImageItem = {\n    imageName: \"\",\n    imageFullPath: \"\",\n    imageDescription: \"test\",\n    imageUrl: \"\"\n}\nconst portfolioStateInitial: PortfolioItem = {\n    itemName: '',\n    itemDescription: '',\n    creationDate: '',\n    imgLocation: \"\",\n    groupLocation: \"\"\n};\n\nconst reducer = (state: any, action: any) => {\n    switch (action.type) {\n        case 'spread':\n            return {\n                ...action.payload\n            }\n        case 'dbReplace':\n            return {\n                ...action.payload\n            }\n        case 'selectedImages':\n            return {\n                ...state,\n                'selectedImages': [\n                    ...state.selectedImages,\n                    action.payload\n                ],\n            }\n        default:\n            return {\n                ...state,\n                [action.type]: action.payload\n            }\n    }\n}\n\nconst CreatePortfolioEntryCard: React.FC<ContainerProps> = ({ name }) => {\n    //blueprint for database entries for reference\n\n    //declaring multiple state variables\n    //state has portfolioId, pictureGroupId, inventoryId\n    const [portfolioState, portfolioDispatch] = useReducer(reducer, portfolioStateInitial)\n    const [imageState, imageDispatch] = useReducer(reducer, imageStateInitial)\n    const [allStorageImgs, updateAllStorageImgs] = useReducer(reducer, {})\n    const [allDbImages, updateDbImages] = useReducer(reducer, {})\n    const [selectedImg, updateSelectedImg] = useState<string>(\"\")\n    //const [imgBank, updateImgBank] = useReducer(reducer, {selectedImages:[]})\n    const [imgBank, updateImgBank] = useState<Array<string>>([])\n    const [selectedGroup, updateSelectedGroup] = useState<string>()\n    const storageRef = firebase.fbApp.storage().ref();\n    const database = firebase.fbApp.database()\n    var listRef = storageRef.child('pictures');\n\n\n\n    const onChangeHandlerPortfolio = (event: any) => {\n        portfolioDispatch({\n            type: event.target.name,\n            payload: event.detail.value,\n        })\n    }\n    useEffect(() => {\n        listRef.listAll().then(function (res) {\n            res.items.forEach(function (itemRef) {\n                itemRef.getDownloadURL().then(function (url) {\n                    updateAllStorageImgs({\n                        type: itemRef.name,\n                        //@ts-ignore\n                        payload: {\n                            imageUrl: url,\n                            imageName: itemRef.name,\n                            imageFullPath: itemRef.fullPath\n                        }\n                    });\n                })\n\n            });\n        }).catch(function (error) {\n            console.log('error getting pictures references')\n        });\n        database.ref('images/').once('value').then(function (snapshot) {\n            updateDbImages({\n                type: \"dbReplace\",\n                payload: snapshot.val()\n            });\n        })\n    }, [])\n\n    const pushNewPortfolioEntry = (event: any) => {\n        database.ref('portfolio/').push({\n            itemName: portfolioState.itemName,\n            itemDescription: portfolioState.itemDescription,\n            imgArr: imgBank,\n            creationDate: portfolioState.creationDate\n        })\n    }\n\n    const onSelectDropdownImgPortfolio = (event: any) => {\n        if (event.detail.value) {\n            console.log(`[onSelectDropdownImgPortfolio]: ${event.detail.value}`)\n            //console.log(allDbImages)\n            const imageRef = allDbImages[event.detail.value]\n            const newImgBank = [...imgBank, event.detail.value]\n            updateImgBank(newImgBank)\n        }\n    }\n    const removeImageHandler = (event: React.MouseEvent<HTMLIonButtonElement, MouseEvent>, index: number) => {\n        if(imgBank[index]){\n        console.log(`removing ${imgBank[index]}`);\n        const removedImage = imgBank.splice(index, 1);\n        updateImgBank(imgBank);\n        }\n    }\n    const imageOptions = Object.entries(allStorageImgs).map((key, value) => {\n        //@ts-ignore\n        return <IonSelectOption value={key[0]}>{key[1].imageName}</IonSelectOption>\n    })\n    //console.log(dbImages)\n    const dbImageOptions = Object.entries(allDbImages).map((key, value) => {\n        //console.log(key[0])\n        //@ts-ignore\n        return <IonSelectOption value={key[0]}>{key[1].imageDescription}</IonSelectOption>\n    })\n    //const selectedImages = false\n    const selectedImages = imgBank.map((selectedImg: string | number, index: number) => {\n        console.log(`[selectedImages]: selected image: ${selectedImg}`)\n        if (selectedImg) {\n            console.log(allDbImages[selectedImg].imageName)\n            console.log(allStorageImgs)\n            return <IonRow>\n                <IonCol size=\"2\">\n                    <IonImg src={allStorageImgs[allDbImages[selectedImg].imageName] ? allStorageImgs[allDbImages[selectedImg].imageName].imageUrl : false} />\n                </IonCol>\n                <IonCol className=\"ion-align-self-end\">\n                    <IonButton color=\"danger\" onClick={(e) => removeImageHandler(e, index)}>\n                        <IonIcon name=\"close-circle\" />\n                    </IonButton>\n\n                </IonCol>\n\n            </IonRow>\n        }\n    });\n\n    return (\n        <IonItem>\n\n            <IonCard>\n                <IonCardHeader>\n                    <IonCardTitle>Create Entry</IonCardTitle>\n                    <IonCardSubtitle>for Portfolio</IonCardSubtitle>\n                </IonCardHeader>\n                <IonCardContent>\n                    <IonItem>\n                        <IonList>\n                            <IonItemDivider color=\"secondary\">\n                                Details\n                </IonItemDivider>\n                            <IonItem>\n                                <IonLabel>Name: </IonLabel>\n                                <IonInput value={portfolioState.itemName} name='itemName' placeholder=\"...\" onIonChange={e => onChangeHandlerPortfolio(e!)}></IonInput>\n                            </IonItem>\n\n                            <IonItem>\n                                <IonLabel>Description: </IonLabel>\n                                <IonInput value={portfolioState.itemDescription} name='itemDescription' placeholder=\"...\" onIonChange={e => onChangeHandlerPortfolio(e!)}></IonInput>\n                            </IonItem>\n\n                            <IonItem>\n                                <IonLabel>Creation Date: </IonLabel>\n                                <IonInput value={portfolioState.creationDate} name='creationDate' placeholder=\"...\" onIonChange={e => onChangeHandlerPortfolio(e!)}></IonInput>\n                            </IonItem>\n                            <IonItemDivider color=\"secondary\">\n                                Link to Pictures / Groups\n                        </IonItemDivider>\n                            <IonItem>Image Location: {portfolioState.imgLocation}</IonItem>\n                            <IonItem>\n                                <IonLabel>Selected Images:</IonLabel>\n                                <IonSelect value={selectedImg} okText=\"Okay\" cancelText=\"Dismiss\" onIonChange={e => onSelectDropdownImgPortfolio(e!)}>\n                                    {dbImageOptions}\n                                </IonSelect>\n                            </IonItem>\n\n                            <IonItem>\n                                <IonGrid fixed>\n                                    <IonRow>\n                                        {selectedImages ? selectedImages : 'not loaded'}\n                                    </IonRow>\n                                </IonGrid>\n                            </IonItem>\n                            <IonItem>\n                                <IonButton\n                                    color=\"seccondary\" onClick={(e) => pushNewPortfolioEntry(e!)}>\n                                    Create!\n                            </IonButton>\n                            </IonItem>\n                        </IonList>\n                    </IonItem>\n                </IonCardContent>\n            </IonCard>\n\n        </IonItem>\n    )\n};\n\nexport default CreatePortfolioEntryCard;\n","/Users/drew/Documents/Development/Morgan_Site/MoShops/src/hooks/useFirebaseUpload.tsx",[],{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","severity":1,"message":"214","line":3,"column":8,"nodeType":"215","messageId":"216","endLine":3,"endColumn":26},{"ruleId":"213","severity":1,"message":"217","line":2,"column":29,"nodeType":"215","messageId":"216","endLine":2,"endColumn":38},{"ruleId":"213","severity":1,"message":"218","line":24,"column":10,"nodeType":"215","messageId":"216","endLine":24,"endColumn":15},{"ruleId":"213","severity":1,"message":"219","line":24,"column":17,"nodeType":"215","messageId":"216","endLine":24,"endColumn":25},{"ruleId":"213","severity":1,"message":"220","line":41,"column":7,"nodeType":"215","messageId":"216","endLine":41,"endColumn":15},{"ruleId":"213","severity":1,"message":"221","line":4,"column":17,"nodeType":"215","messageId":"216","endLine":4,"endColumn":27},{"ruleId":"213","severity":1,"message":"222","line":4,"column":29,"nodeType":"215","messageId":"216","endLine":4,"endColumn":35},{"ruleId":"213","severity":1,"message":"217","line":4,"column":37,"nodeType":"215","messageId":"216","endLine":4,"endColumn":46},{"ruleId":"213","severity":1,"message":"223","line":4,"column":48,"nodeType":"215","messageId":"216","endLine":4,"endColumn":64},{"ruleId":"213","severity":1,"message":"224","line":4,"column":66,"nodeType":"215","messageId":"216","endLine":4,"endColumn":74},{"ruleId":"213","severity":1,"message":"225","line":5,"column":10,"nodeType":"215","messageId":"216","endLine":5,"endColumn":17},{"ruleId":"213","severity":1,"message":"226","line":5,"column":40,"nodeType":"215","messageId":"216","endLine":5,"endColumn":48},{"ruleId":"213","severity":1,"message":"227","line":5,"column":50,"nodeType":"215","messageId":"216","endLine":5,"endColumn":64},{"ruleId":"213","severity":1,"message":"228","line":5,"column":66,"nodeType":"215","messageId":"216","endLine":5,"endColumn":75},{"ruleId":"213","severity":1,"message":"229","line":5,"column":77,"nodeType":"215","messageId":"216","endLine":5,"endColumn":85},{"ruleId":"213","severity":1,"message":"230","line":5,"column":87,"nodeType":"215","messageId":"216","endLine":5,"endColumn":101},{"ruleId":"213","severity":1,"message":"231","line":5,"column":103,"nodeType":"215","messageId":"216","endLine":5,"endColumn":109},{"ruleId":"213","severity":1,"message":"232","line":5,"column":111,"nodeType":"215","messageId":"216","endLine":5,"endColumn":120},{"ruleId":"213","severity":1,"message":"233","line":5,"column":122,"nodeType":"215","messageId":"216","endLine":5,"endColumn":137},{"ruleId":"213","severity":1,"message":"234","line":5,"column":139,"nodeType":"215","messageId":"216","endLine":5,"endColumn":146},{"ruleId":"213","severity":1,"message":"235","line":5,"column":148,"nodeType":"215","messageId":"216","endLine":5,"endColumn":161},{"ruleId":"213","severity":1,"message":"236","line":5,"column":163,"nodeType":"215","messageId":"216","endLine":5,"endColumn":178},{"ruleId":"213","severity":1,"message":"237","line":5,"column":180,"nodeType":"215","messageId":"216","endLine":5,"endColumn":192},{"ruleId":"213","severity":1,"message":"238","line":5,"column":194,"nodeType":"215","messageId":"216","endLine":5,"endColumn":208},{"ruleId":"213","severity":1,"message":"239","line":6,"column":8,"nodeType":"215","messageId":"216","endLine":6,"endColumn":28},{"ruleId":"213","severity":1,"message":"240","line":7,"column":8,"nodeType":"215","messageId":"216","endLine":7,"endColumn":30},{"ruleId":"213","severity":1,"message":"241","line":20,"column":7,"nodeType":"215","messageId":"216","endLine":20,"endColumn":14},{"ruleId":"213","severity":1,"message":"242","line":39,"column":9,"nodeType":"215","messageId":"216","endLine":39,"endColumn":16},{"ruleId":"213","severity":1,"message":"243","line":1,"column":8,"nodeType":"215","messageId":"216","endLine":1,"endColumn":16},{"ruleId":"213","severity":1,"message":"244","line":2,"column":66,"nodeType":"215","messageId":"216","endLine":2,"endColumn":73},{"ruleId":"213","severity":1,"message":"243","line":3,"column":8,"nodeType":"215","messageId":"216","endLine":3,"endColumn":16},{"ruleId":"213","severity":1,"message":"245","line":43,"column":9,"nodeType":"215","messageId":"216","endLine":43,"endColumn":24},{"ruleId":"213","severity":1,"message":"235","line":5,"column":31,"nodeType":"215","messageId":"216","endLine":5,"endColumn":44},{"ruleId":"213","severity":1,"message":"236","line":5,"column":46,"nodeType":"215","messageId":"216","endLine":5,"endColumn":61},{"ruleId":"213","severity":1,"message":"237","line":5,"column":63,"nodeType":"215","messageId":"216","endLine":5,"endColumn":75},{"ruleId":"213","severity":1,"message":"246","line":5,"column":93,"nodeType":"215","messageId":"216","endLine":5,"endColumn":100},{"ruleId":"213","severity":1,"message":"247","line":39,"column":10,"nodeType":"215","messageId":"216","endLine":39,"endColumn":19},{"ruleId":"213","severity":1,"message":"248","line":39,"column":21,"nodeType":"215","messageId":"216","endLine":39,"endColumn":36},{"ruleId":"249","severity":1,"message":"250","line":82,"column":6,"nodeType":"251","endLine":82,"endColumn":8,"suggestions":"252"},{"ruleId":"253","severity":1,"message":"254","line":85,"column":84,"nodeType":"255","messageId":"256","endLine":85,"endColumn":86},{"ruleId":"213","severity":1,"message":"257","line":87,"column":13,"nodeType":"215","messageId":"216","endLine":87,"endColumn":21},{"ruleId":"213","severity":1,"message":"258","line":87,"column":23,"nodeType":"215","messageId":"216","endLine":87,"endColumn":35},{"ruleId":"213","severity":1,"message":"259","line":87,"column":37,"nodeType":"215","messageId":"216","endLine":87,"endColumn":52},{"ruleId":"249","severity":1,"message":"260","line":109,"column":6,"nodeType":"251","endLine":109,"endColumn":27,"suggestions":"261"},{"ruleId":"213","severity":1,"message":"262","line":111,"column":9,"nodeType":"215","messageId":"216","endLine":111,"endColumn":17},{"ruleId":"263","severity":1,"message":"264","line":130,"column":32,"nodeType":"265","messageId":"266","endLine":130,"endColumn":34},{"ruleId":"263","severity":1,"message":"267","line":132,"column":24,"nodeType":"265","messageId":"266","endLine":132,"endColumn":26},{"ruleId":"209","replacedBy":"268"},{"ruleId":"211","replacedBy":"269"},{"ruleId":"213","severity":1,"message":"238","line":2,"column":50,"nodeType":"215","messageId":"216","endLine":2,"endColumn":64},{"ruleId":"213","severity":1,"message":"234","line":2,"column":66,"nodeType":"215","messageId":"216","endLine":2,"endColumn":73},{"ruleId":"213","severity":1,"message":"270","line":10,"column":9,"nodeType":"215","messageId":"216","endLine":10,"endColumn":13},{"ruleId":"213","severity":1,"message":"271","line":51,"column":11,"nodeType":"215","messageId":"216","endLine":51,"endColumn":23},{"ruleId":"213","severity":1,"message":"272","line":51,"column":36,"nodeType":"215","messageId":"216","endLine":51,"endColumn":43},{"ruleId":"213","severity":1,"message":"273","line":53,"column":9,"nodeType":"215","messageId":"216","endLine":53,"endColumn":19},{"ruleId":"213","severity":1,"message":"274","line":57,"column":12,"nodeType":"215","messageId":"216","endLine":57,"endColumn":22},{"ruleId":"213","severity":1,"message":"275","line":57,"column":24,"nodeType":"215","messageId":"216","endLine":57,"endColumn":37},{"ruleId":"263","severity":1,"message":"264","line":69,"column":22,"nodeType":"265","messageId":"266","endLine":69,"endColumn":24},{"ruleId":"263","severity":1,"message":"264","line":69,"column":38,"nodeType":"265","messageId":"266","endLine":69,"endColumn":40},{"ruleId":"276","severity":1,"message":"277","line":168,"column":27,"nodeType":"278","endLine":170,"endColumn":17},{"ruleId":"213","severity":1,"message":"279","line":3,"column":10,"nodeType":"215","messageId":"216","endLine":3,"endColumn":20},{"ruleId":"213","severity":1,"message":"218","line":66,"column":12,"nodeType":"215","messageId":"216","endLine":66,"endColumn":17},{"ruleId":"213","severity":1,"message":"280","line":68,"column":25,"nodeType":"215","messageId":"216","endLine":68,"endColumn":42},{"ruleId":"213","severity":1,"message":"281","line":69,"column":27,"nodeType":"215","messageId":"216","endLine":69,"endColumn":46},{"ruleId":"213","severity":1,"message":"282","line":77,"column":11,"nodeType":"215","messageId":"216","endLine":77,"endColumn":27},{"ruleId":"213","severity":1,"message":"279","line":3,"column":10,"nodeType":"215","messageId":"216","endLine":3,"endColumn":20},{"ruleId":"213","severity":1,"message":"218","line":66,"column":12,"nodeType":"215","messageId":"216","endLine":66,"endColumn":17},{"ruleId":"213","severity":1,"message":"280","line":68,"column":25,"nodeType":"215","messageId":"216","endLine":68,"endColumn":42},{"ruleId":"213","severity":1,"message":"281","line":69,"column":27,"nodeType":"215","messageId":"216","endLine":69,"endColumn":46},{"ruleId":"213","severity":1,"message":"282","line":77,"column":11,"nodeType":"215","messageId":"216","endLine":77,"endColumn":27},{"ruleId":"213","severity":1,"message":"279","line":3,"column":10,"nodeType":"215","messageId":"216","endLine":3,"endColumn":20},{"ruleId":"213","severity":1,"message":"280","line":68,"column":25,"nodeType":"215","messageId":"216","endLine":68,"endColumn":42},{"ruleId":"213","severity":1,"message":"281","line":69,"column":27,"nodeType":"215","messageId":"216","endLine":69,"endColumn":46},{"ruleId":"213","severity":1,"message":"282","line":77,"column":11,"nodeType":"215","messageId":"216","endLine":77,"endColumn":27},{"ruleId":"213","severity":1,"message":"279","line":3,"column":10,"nodeType":"215","messageId":"216","endLine":3,"endColumn":20},{"ruleId":"213","severity":1,"message":"283","line":16,"column":11,"nodeType":"215","messageId":"216","endLine":16,"endColumn":20},{"ruleId":"213","severity":1,"message":"284","line":30,"column":11,"nodeType":"215","messageId":"216","endLine":30,"endColumn":23},{"ruleId":"213","severity":1,"message":"274","line":80,"column":12,"nodeType":"215","messageId":"216","endLine":80,"endColumn":22},{"ruleId":"213","severity":1,"message":"275","line":80,"column":24,"nodeType":"215","messageId":"216","endLine":80,"endColumn":37},{"ruleId":"213","severity":1,"message":"280","line":83,"column":25,"nodeType":"215","messageId":"216","endLine":83,"endColumn":42},{"ruleId":"213","severity":1,"message":"285","line":86,"column":12,"nodeType":"215","messageId":"216","endLine":86,"endColumn":25},{"ruleId":"213","severity":1,"message":"281","line":86,"column":27,"nodeType":"215","messageId":"216","endLine":86,"endColumn":46},{"ruleId":"249","severity":1,"message":"286","line":124,"column":8,"nodeType":"251","endLine":124,"endColumn":10,"suggestions":"287"},{"ruleId":"213","severity":1,"message":"288","line":139,"column":19,"nodeType":"215","messageId":"216","endLine":139,"endColumn":27},{"ruleId":"213","severity":1,"message":"289","line":147,"column":15,"nodeType":"215","messageId":"216","endLine":147,"endColumn":27},{"ruleId":"213","severity":1,"message":"290","line":151,"column":11,"nodeType":"215","messageId":"216","endLine":151,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":162,"column":86,"nodeType":"255","messageId":"256","endLine":162,"endColumn":88},"no-native-reassign",["291"],"no-negated-in-lhs",["292"],"@typescript-eslint/no-unused-vars","'PortfolioContainer' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'state' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'userName' is assigned a value but never used.","'useReducer' is defined but never used.","'useRef' is defined but never used.","'MutableRefObject' is defined but never used.","'useState' is defined but never used.","'IonList' is defined but never used.","'IonInput' is defined but never used.","'IonItemDivider' is defined but never used.","'IonButton' is defined but never used.","'IonLabel' is defined but never used.","'IonProgressBar' is defined but never used.","'IonImg' is defined but never used.","'IonSelect' is defined but never used.","'IonSelectOption' is defined but never used.","'IonCard' is defined but never used.","'IonCardHeader' is defined but never used.","'IonCardSubtitle' is defined but never used.","'IonCardTitle' is defined but never used.","'IonCardContent' is defined but never used.","'CreateGroupEntryCard' is defined but never used.","'CreatePictureEntryCard' is defined but never used.","'reducer' is assigned a value but never used.","'listRef' is assigned a value but never used.","'firebase' is defined but never used.","'IonText' is defined but never used.","'onChangeHandler' is assigned a value but never used.","'IonItem' is defined but never used.","'localImgs' is assigned a value but never used.","'updateLocalImgs' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allPortfolioEntries', 'database', and 'listRef'. Either include them or remove the dependency array.","ArrayExpression",["293"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'itemName' is assigned a value but never used.","'creationDate' is assigned a value but never used.","'itemDescription' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'allDbImages', 'allStorageImgs', and 'buildPortfolioMatrix'. Either include them or remove the dependency array.",["294"],"'maxWidth' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.",["291"],["292"],"'name' is assigned a value but never used.","'dataResponse' is assigned a value but never used.","'isError' is assigned a value but never used.","'clearError' is assigned a value but never used.","'imageState' is assigned a value but never used.","'imageDispatch' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","'IonContent' is defined but never used.","'updateSelectedImg' is assigned a value but never used.","'updateSelectedGroup' is assigned a value but never used.","'portfolioOptions' is assigned a value but never used.","'StoreItem' is defined but never used.","'PictureGroup' is defined but never used.","'selectedGroup' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'database' and 'listRef'. Either include them or remove the dependency array.",["295"],"'imageRef' is assigned a value but never used.","'removedImage' is assigned a value but never used.","'imageOptions' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},"Update the dependencies array to be: [allPortfolioEntries, database, listRef]",{"range":"302","text":"303"},"Update the dependencies array to be: [allDbImages, allPortfolioEntries, allStorageImgs, buildPortfolioMatrix]",{"range":"304","text":"305"},"Update the dependencies array to be: [database, listRef]",{"range":"306","text":"307"},[2499,2501],"[allPortfolioEntries, database, listRef]",[3592,3613],"[allDbImages, allPortfolioEntries, allStorageImgs, buildPortfolioMatrix]",[3868,3870],"[database, listRef]"]